// Zero constant
ZERO             ........ ........ ........ ........ ........ ........ ........ ........ ........ ........

// Initialize p0 mapping register
uP0-INIT         ........ ........ ........ ........ ........ ........ ........ ........ ........ .......1

// Set interrupt uCode handler
uIRQINIT         ........ ........ ........ ........ ........ ........ ........ ........ ........ ......1.

// uControl Unit operations
uP0              ........ ........ ........ ........ ........ ........ ........ ........ ........ .....1..
uP1              ........ ........ ........ ........ ........ ........ ........ ........ ........ ....1...
uP2              ........ ........ ........ ........ ........ ........ ........ ........ ........ ...1....
uJMP             ........ ........ ........ ........ ........ ........ ........ ........ ........ ..1.....
uNJMP            ........ ........ ........ ........ ........ ........ ........ ........ ........ .1......    
uVJMP            ........ ........ ........ ........ ........ ........ ........ ........ ........ 1.......    
uZJMP            ........ ........ ........ ........ ........ ........ ........ ........ .......1 ........    
uCJMP            ........ ........ ........ ........ ........ ........ ........ ........ ......1. ........ 
uJMP/INV         ........ ........ ........ ........ ........ ........ ........ ........ .....1.. ........

// Constant values used during initialize/reset
CDATA/LD/0       ........ ........ ........ ........ ........ ........ ........ ........ ....1... ........
CDATA/LD/FF      ........ ........ ........ ........ ........ ........ ........ ........ ...1.... ........

// Open path from internal data bus to the address bus
CDATA/TO/CADDRL  ........ ........ ........ ........ ........ ........ ........ ........ ..1..... ........
CDATA/TO/CADDRH  ........ ........ ........ ........ ........ ........ ........ ........ .1...... ........

// External data bus <-> memory
MEM/LD/XDATA     ........ ........ ........ ........ ........ ........ ........ ........ 1....... ........  
MEM/OUT/XDATA    ........ ........ ........ ........ ........ ........ ........ .......1 ........ ........  

// Instruction register
IR/LD/XDATA      ........ ........ ........ ........ ........ ........ ........ ......1. ........ ........   

// MBR <-> external data bus
MBR/LD/XDATA     ........ ........ ........ ........ ........ ........ ........ .....1.. ........ ........
MBR/OUT/XDATA    ........ ........ ........ ........ ........ ........ ........ ....1... ........ ........

// MBR <-> internal data bus
MBR/LD/CDATA     ........ ........ ........ ........ ........ ........ ........ ...1.... ........ ........  
MBR/OUT/CDATA    ........ ........ ........ ........ ........ ........ ........ ..1..... ........ ........ 

// MAR(L/H) <-> internal address bus
MARL/LD/CADDRL   ........ ........ ........ ........ ........ ........ ........ .1...... ........ ........
MARH/LD/CADDRH   ........ ........ ........ ........ ........ ........ ........ 1....... ........ ........  

// Program counter 
PC/INC           ........ ........ ........ ........ ........ ........ .......1 ........ ........ ........
PC/REL/CDATA     ........ ........ ........ ........ ........ ........ ......1. ........ ........ ........
PCL/LD/CDATA     ........ ........ ........ ........ ........ ........ .....1.. ........ ........ ........
PCL/OUT/CDATA    ........ ........ ........ ........ ........ ........ ....1... ........ ........ ........
PCH/LD/CDATA     ........ ........ ........ ........ ........ ........ ...1.... ........ ........ ........
PCH/OUT/CDATA    ........ ........ ........ ........ ........ ........ ..1..... ........ ........ ........    
PC/OUT/CADDR     ........ ........ ........ ........ ........ ........ .1...... ........ ........ ........  

// Temporary "stash" registers
STASHL/LD/CDATA   ........ ........ ........ ........ ........ ........ 1....... ........ ........ ........
STASHL/OUT/CDATA  ........ ........ ........ ........ ........ .......1 ........ ........ ........ ........
STASHH/LD/CDATA   ........ ........ ........ ........ ........ ......1. ........ ........ ........ ........
STASHH/OUT/CDATA  ........ ........ ........ ........ ........ .....1.. ........ ........ ........ ........

// Accumulator
A/LD/CDATA       ........ ........ ........ ........ ........ ....1... ........ ........ ........ ........   
A/OUT/CDATA      ........ ........ ........ ........ ........ ...1.... ........ ........ ........ ........ 

// X register
X/LD/CDATA       ........ ........ ........ ........ ........ ..1..... ........ ........ ........ ........
X/OUT/CDATA      ........ ........ ........ ........ ........ .1...... ........ ........ ........ ........

// Y register
Y/LD/CDATA       ........ ........ ........ ........ ........ 1....... ........ ........ ........ ........
Y/OUT/CDATA      ........ ........ ........ ........ .......1 ........ ........ ........ ........ ........

// Load P flags
PN/LD            ........ ........ ........ ........ ......1. ........ ........ ........ ........ ........
PV/LD            ........ ........ ........ ........ .....1.. ........ ........ ........ ........ ........
PI/LD            ........ ........ ........ ........ ....1... ........ ........ ........ ........ ........
PZ/LD            ........ ........ ........ ........ ...1.... ........ ........ ........ ........ ........
PC/LD            ........ ........ ........ ........ ..1..... ........ ........ ........ ........ ........

// Source of data from which to load P flags
// 000 => reset
// 001 => set
// 010 => ALU
// 011 => Flags processed from CDATA
// 100 => Raw CDATA
// 1xx => N/A
P/SRC/0          ........ ........ ........ ........ .1...... ........ ........ ........ ........ ........
P/SRC/1          ........ ........ ........ ........ 1....... ........ ........ ........ ........ ........       
P/SRC/2          ........ ........ ........ .......1 ........ ........ ........ ........ ........ ........

// P to CDATA
P/OUT/CDATA      ........ ........ ........ ......1. ........ ........ ........ ........ ........ ........

// ALU data movement
ALUA/LD/CDATA    ........ ........ ........ .....1.. ........ ........ ........ ........ ........ ........
ALUB/LD/CDATA    ........ ........ ........ ....1... ........ ........ ........ ........ ........ ........
ALUC/LD          ........ ........ ........ ...1.... ........ ........ ........ ........ ........ ........
ALUR/OUT/CDATA   ........ ........ ........ ..1..... ........ ........ ........ ........ ........ ........

ALUC/SRC/0       ........ ........ ........ .1...... ........ ........ ........ ........ ........ ........
ALUC/SRC/1       ........ ........ ........ 1....... ........ ........ ........ ........ ........ ........

// ALU operation
// 0 0 0 0 AND
// 0 0 0 1 OR
// 0 0 1 0 NOT
// 0 0 1 1 XOR
// 0 1 0 0 ADD
// 0 1 0 1 SUB
// 0 1 1 0 INC
// 0 1 1 1 DEC
// 1 0 0 0 SHIFT-R
// 1 0 0 1 SHIFT-L
// 1 0 1 0 ROT-R
// 1 0 1 1 ROT-L
ALUOP/0          ........ ........ .......1 ........ ........ ........ ........ ........ ........ ........
ALUOP/1          ........ ........ ......1. ........ ........ ........ ........ ........ ........ ........
ALUOP/2          ........ ........ .....1.. ........ ........ ........ ........ ........ ........ ........
ALUOP/3          ........ ........ ....1... ........ ........ ........ ........ ........ ........ ........

// Stack pointer - starts at $0100 and grows upwards to $01FF
S/INC            ........ ........ ...1.... ........ ........ ........ ........ ........ ........ ........
S/DEC            ........ ........ ..1..... ........ ........ ........ ........ ........ ........ ........
S/LD/CDATA       ........ ........ .1...... ........ ........ ........ ........ ........ ........ ........
S/OUT/CDATA      ........ ........ 1....... ........ ........ ........ ........ ........ ........ ........
S/OUT/CADDR      ........ .......1 ........ ........ ........ ........ ........ ........ ........ ........

// Source of the control unit's P flags (default is the P register)
CUP/SRC/ALU      ........ ......1. ........ ........ ........ ........ ........ ........ ........ ........

// Flag a reset to the CPU - PC will be set to the reset vector
CPU/RESET         ........ .....1.. ........ ........ ........ ........ ........ ........ ........ ........

// Flag a halt condition to the CPU
CPU/HALT             ........ ....1... ........ ........ ........ ........ ........ ........ ........ ........

// Flag a IRQ/BRK to the CPU - PC will be set to the IRQ/BRK vector
CPU/IRQ           ........ ...1.... ........ ........ ........ ........ ........ ........ ........ ........


