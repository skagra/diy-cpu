// =============================================================================
// Init code
// =============================================================================

.label RESET
ZERO
uP0INIT p0                                                          // Load the location  of p0 code into the control unit
uIRQINIT IRQ                                                         // Load the location of IRQ code TODO: BRK for now!
CDATA/LD/FF | S/LD/CDATA                                             // Set the stack pointer 
                                                                     // Zero registers
CDATA/LD/0 | A/LD/CDATA | X/LD/CDATA | Y/LD/CDATA | STASHH/LD/CDATA | STASHL/LD/CDATA | ALUA/LD/CDATA | ALUB/LD/CDATA | ALUC<-0
PZ/LD | PN/LD | PC/LD | PV/LD | PI/LD | P/SRC-0                      // Zero P   
CPU/RESET                                                             // Load the reset vector location in the PC
MAR<-PC | MBR<-MEM                                                   // Load the LSB of the reset vector
STASHL<-MBR | PC-INC                                                 // Store it in STASHL, and increase the PC
MAR<-PC | MBR<-MEM                                                   // Load the MSB of the reset vector
PCL<-STASHL                                                          // Move the LSB of the reset vector into the PC
PCH<-MBR                                                             // Move the MSB of the reset vector into the PC

// =============================================================================
// Fetch (uP0)
// =============================================================================

.label p0
MAR<-PC | PC-INC                                                     // Move the PC into MAR and increase the PC                        
IR<-MEM                                                              // Load the current op code from memory into the IR
uP1                                                                  // Separate cycle as we don't have a handle on the op code for decoding until the previous cycle is completed

// =============================================================================
// Addressing modes (uP1) 
// =============================================================================

// Absolute 
.mode ABS
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB address at PC, and increase PC
STASHL<-MBR                                                          // Store the LSB in STASHL
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the MSB address at PC, and increase PC
MARL<-STASHL                                                         // Move the LSB into MARL
MARH<-MBR | uP2                                                      // Move the MSB int MARL and jump to uP2

// Abs index by X 
.mode ABSIDXX 
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB of the index base argument then increase the PC
ALUA<-MBR                                                            // Move the LSB of the argument ALUA
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the MSB of the index base argument in the MBR  
ALUB<-X | ALUC<-0                                                    // Move X into ALUB and reset the carry flag
ALUOP-ADD | MARL<-ALU | CUP/SRC/ALU | uJMP/INV | uCJMP ABSX_DONE     // Add X and the LSB, store the result in MARL and check whether we've spanned a page boundary
ALUA<-MBR                                                            // Spanned a page boundary - move MSB to ALUA 
ALUOP-INC | MARH<-ALU | uP2                                          // Increase the MSB, store the result in MARH, then jump to uP2
.label ABSX_DONE
MARH<-MBR | uP2                                                      // Move the high order byte into the of the base address into the MARH

// Abs index by Y 
.mode ABSIDXY
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB of the index base then increase the PC
ALUA<-MBR                                                            // Move the LSB to ALUA
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the MSB of the index base  
Y/OUT/CDATA | ALUB/LD/CDATA | ALUC<-0                                // Move Y into ALUB and reset the carry flag
ALUOP-ADD | MARL<-ALU | CUP/SRC/ALU | uJMP/INV | uCJMP ABSY_DONE     // Add Y and the LSB, store the result in MARL and check whether we've spanned a page boundary
ALUA<-MBR                                                            // Spanned a page boundary - move MSB to ALUA 
ALUOP-INC | MARH<-ALU | uP2                                          // Increase the MSB, store the result in MARH, then jump to uP2
.label ABSY_DONE
MARH<-MBR | uP2                                                      // Move the high order byte into the of the base address into the MARH

// Accumulator 
.mode ACC 
uP2 

// Immediate 
.mode IMM
MAR<-PC | PC-INC | uP2                                               // Move the PC into MAR and jump to uP2

// Implied 
.mode IMP 
uP2                                                                  // Jump directly to uP2

// Relative 
.mode REL
MAR<-PC | PC-INC | uP2                                               // Move the PC into MAR and jump to uP2
                                                                                                      
// X Indirect ADC ($44,X)
.mode XIND
MAR<-PC | MBR<-MEM | PC-INC                                          // Get the base index zero page location
ALUA<-MBR                                                            // Move it into ALUA
X/OUT/CDATA | ALUB/LD/CDATA | ALUC<-0                                // Move X into ALUB and clear carry
ALUOP-ADD | STASHL<-ALU                                              // Add X and the base index, store result in STASHL (ignoring any carry), this points to the ZP data we need
CDATA/LD/0 | CDATA/TO/CADDRH | MARH/LD/CADDRH                        // Zero out MARH as we are in ZP
MARL<-STASHL | MBR<-MEM                                              // Load the final LSB into STASHH
STASHH<-MBR
STASHL/OUT/CDATA | ALUA/LD/CDATA                                     // Inc base address to point to the final MSB
ALUOP-INC | MARL<-ALU                                                // and store the pointer in MARL
MBR<-MEM                                                             // Load the final MSB
MARH<-MBR                                                            // Copy final values into MAR
MARL<-STASHH | uP2

// The zero page argument is added to Y to give the zero page address of the operand.  Addition wraps to zero page.  
// Indirect Y ADC ($44),Y
.mode INDY
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the ZP address of the index then increase the PC
STASHH<-MBR                                                          // Store the ZP address in STASHH
CDATA/LD/0 | CDATA/TO/CADDRH | MARH/LD/CADDRH                        // Zero out the MARH as we are in ZP
MARL<-STASHH | MBR<-MEM                                              // Get the low byte of index base
STASHL<-MBR                                                          // Store LSB in STASHL
ALUA<-STASHH                                                         // Zero page index address
ALUOP-INC | MARL<-ALU                                                // Increase it
MBR<-MEM                                                             // Get the second byte of index base 
STASHH<-MBR                                                          // Store it in STASHH
ALUA<-STASHL                                                         // Now we need to add Y
ALUB<-Y | ALUC<-0
ALUOP-ADD | STASHL<-ALU | CUP/SRC/ALU | uJMP/INV | uCJMP INDY_DONE   // No carry so done
ALUA<-STASHH                                                         // Carry so need to increase the MSB
ALUOP-INC | STASHH<-ALU                                                                    
.label INDY_DONE
MARH<-STASHH
MARL<-STASHL | uP2

// Zero 
.mode ZP
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the zero page address of the operand
MARL<-MBR                                                            // Move the address into the LSB of the MAR
CDATA/LD/0 | CDATA/TO/CADDRH | MARH/LD/CADDRH | uP2                  // Move zero into the MSB of the MAR

// Zero index X
.mode ZPIDXX
MAR<-PC | MBR<-MEM | PC-INC                                          // Read index base then increase the PC
ALUA<-MBR                                                            // Move index base to ALUA
ALUB<-X | ALUC<-0                                                    // Move X into ALUB and clear carry
ALUOP-ADD | MARL<-ALU                                                // Add X and the index base and store in MARL
CDATA/LD/0 | CDATA/TO/CADDRH | MARH/LD/CADDRH | uP2                  // Zero out MARH

// Zero index Y
.mode ZPIDXY
MAR<-PC | MBR<-MEM | PC-INC                                          // Read index base then increase the PC
ALUA<-MBR                                                            // Move index base to ALUA
ALUB<-Y | ALUC<-0                                                    // Move X into ALUB and clear carry
ALUOP-ADD | MARL<-ALU                                                // Add X and the index base and store in MARL
CDATA/LD/0 | CDATA/TO/CADDRH | MARH/LD/CADDRH | uP2                  // Zero out MARH

// =============================================================================
// Op codes (uP2)
// =============================================================================

// -----------------------------------------------------------------------------
// Arithmetic
// -----------------------------------------------------------------------------

.opcode ADC
MBR<-MEM                                                             // Read the operand from memory                
ALUA<-MBR                                                            // and move it to ALUA
ALUB<-A | ALUC<-PC                                                   // Move A to ALUB
ALUOP-ADD | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | PC/LD | PV/LD | P/SRC-ALU | uP0   // Carry out addition and store the result in A  

.opcode SBC
MBR<-MEM                                                             // Read the operand from memory  
ALUB<-MBR                                                            // and move it to ALUA
ALUA<-A | ALUC<-PC                                                   // Move A to ALUB
ALUOP-SUB | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | PC/LD | PV/LD | P/SRC-ALU | uP0  // Carry out subtraction and store the result in A  

// -----------------------------------------------------------------------------
// Logical
// -----------------------------------------------------------------------------

.opcode AND
MBR<-MEM                                                                   // Load the operand into MBR
ALUA<-MBR                                                                  // Move the operand to ALUA
ALUB<-A                                                                    // Move A to ALUB
ALUOP-AND | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | P/SRC-ALU | uP0  // AND storing result in A and setting P flags

.opcode ORA
MBR<-MEM                                                                   // Load the operand into MBR   
ALUA<-MBR                                                                  // Move the operand to ALUA
ALUB<-A                                                                    // Move A to ALUB
ALUOP-OR | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | P/SRC-ALU | uP0   // OR storing result in A and setting P flags

.opcode EOR
MBR<-MEM                                                                   // Load the operand into MBR
ALUA<-MBR                                                                  // Move the operand to ALUA   
ALUB<-A                                                                    // Move A to ALUB   
ALUOP-XOR | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | P/SRC-ALU | uP0  // EOR storing result in A and setting P flags

.opcode BIT
uP0
MBR<-MEM                                                                   // Load the operand into MBR 
ALUA<-MBR                                                                  // Move the operand to ALUA   
ALUB<-A                                                                    // Move A into ALUB
ALUOP-AND | ALUR/OUT/CDATA | PZ/LD | P/SRC-ALU                             // AND A and the operand using the result to set Z
MBR/OUT/CDATA | PN/LD | PV/LD | P/SRC-CDATA | uP0                          // Set N & V from bits 7 and 6 of the operand

// -----------------------------------------------------------------------------
// Shifts and rotates  
// -----------------------------------------------------------------------------

.opcode ASLACC 
ALUA<-A | ALUC<-PC                                                   // Move A to ALUA, and the C flag to ALUC          
ALUOP-SHL | A<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0         // Carry of the shift, set flags and store result in A                                  

.opcode LSRACC
ALUA<-A | ALUC<-PC                                                   // Move A to ALUA, and the C flag to ALUC        
ALUOP-SHR | A<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0         // Carry of the shift, set flags and store result in A 

.opcode ROLACC
ALUA<-A | ALUC<-PC                                                   // Move A to ALUA, and the C flag to ALUC   
ALUOP-ROTL | A<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0        // Carry of the rot, set flags and store result in A 
 
.opcode RORACC
ALUA<-A | ALUC<-PC                                                   // Move A to ALUA, and the C flag to ALUC   
ALUOP-ROTR | A<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0        // Carry of the rot, set flags and store result in A 

.opcode ASL
MBR<-MEM | ALUC<-PC                                                  // Move operand in memory to MBR, and the C flag to ALUC   
ALUA<-MBR                                                            // Move operand from MBR into ALUA                                  
ALUOP-SHL | MBR<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU             // Carry of the shift, set flags and move result to MBR
MEM<-MBR | uP0                                                       // Move the result into the original memory location

.opcode LSR
MBR<-MEM | ALUC<-PC                                                  // Move operand in memory to MBR, and the C flag to ALUC    
ALUA<-MBR                                                            // Move operand from MBR into ALUA
ALUOP-SHR | MBR<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU             // Carry of the shift, set flags and move result to MBR
MEM<-MBR | uP0                                                       // Move the result into the original memory location

.opcode ROL
MBR<-MEM | ALUC<-PC                                                  // Move operand in memory to MBR, and the C flag to ALUC  
ALUA<-MBR                                                            // Move operand from MBR into ALUA
ALUOP-ROTL | MBR<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU            // Carry of the rot, set flags and move result to MBR
MEM<-MBR | uP0                                                       // Move the result into the original memory location

.opcode ROR
MBR<-MEM | ALUC<-PC                                                  // Move operand in memory to MBR, and the C flag to ALUC  
ALUA<-MBR                                                            // Move operand from MBR into ALUA
ALUOP-ROTR | MBR<-ALU | PZ/LD | PN/LD | PC/LD | P/SRC-ALU            // Carry of the rot, set flags and move result to MBR
MEM<-MBR | uP0                                                       // Move the result into the original memory location

// -----------------------------------------------------------------------------
// Branch
// -----------------------------------------------------------------------------

// Positive
.opcode BPL  
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uJMP/INV | uNJMP BPL_TRUE                                             // If previous operation resulted in non-negative jump to BPL_TRUE
uP0                                                                   // Jump to uP0
.label BPL_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Negative
.opcode BMI     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uNJMP BMI_TRUE                                                        // If previous operation resulted in negative jump to BMI_TRUE
uP0                                                                   // Jump to uP0
.label BMI_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Overflow clear
.opcode BVC     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uJMP/INV | uVJMP BVC_TRUE                                             // If previous operation resulted in no overflow jump to BVC_TRUE
uP0                                                                   // Jump to uP0
.label BVC_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Overflow set
.opcode BVS     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uVJMP BVS_TRUE                                                        // If previous operation resulted in overflow jump to BVS_TRUE
uP0                                                                   // Jump to uP0
.label BVS_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// No carry
.opcode BCC     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uJMP/INV | uCJMP BVC_BCC                                              // If previous operation resulted in no carry jump to BVC_BCC
uP0                                                                   // Jump to uP0
.label BVC_BCC
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Carry
.opcode BCS     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uCJMP BVC_BCS                                                         // If previous operation resulted in a carry jump to BVC_BCS
uP0                                                                   // Jump to uP0
.label BVC_BCS
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Not zero
.opcode BNE     
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uJMP/INV | uZJMP BEQ_BNE                                              // If previous operation resulted in non-zero jump to BEQ_BNE
uP0                                                                   // Jump to uP0
.label BEQ_BNE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// Zero
.opcode BEQ                                                         
MBR<-MEM                                                              // Read the offset from memory at MAR into MBR
uZJMP BEQ_TRUE                                                        // If previous operation resulted in zero jump to BEQ_TRUE
uP0                                                                   // Jump to uP0
.label BEQ_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                    // Add the displacement to the PC 

// -----------------------------------------------------------------------------
// Compare
// -----------------------------------------------------------------------------

.opcode CMP
MBR<-MEM                                                             // Read operand from memory into MBR 
ALUB<-MBR                                                            // Move the operand into ALUB
ALUA<-A | ALUC<-1                                                    // Move A into ALUA (setting the carry as the ALU will do 1's complement otherwise!)
ALUOP-SUB | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0                  // Subtract the operand from A setting P flags as appropriate

.opcode CPX
MBR<-MEM                                                             // Read operand from memory into MBR 
ALUB<-MBR                                                            // Move the operand into ALUB
ALUA<-X | ALUC<-1                                                    // Move X into ALUA (setting the carry as the ALU will do 1's complement otherwise!)
ALUOP-SUB | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0                  // Subtract the operand from X setting P flags as appropriate

.opcode CPY
MBR<-MEM                                                             // Read operand from memory into MBR 
ALUB<-MBR                                                            // Move the operand into ALUB
ALUA<-Y | ALUC<-1                                                    // Move Y into ALUA (setting the carry as the ALU will do 1's complement otherwise!)
ALUOP-SUB | PZ/LD | PN/LD | PC/LD | P/SRC-ALU | uP0                  // Subtract the operand from Y setting P flags as appropriate

// -----------------------------------------------------------------------------
// Inc and Dec
// -----------------------------------------------------------------------------

.opcode DEC
MBR<-MEM                                                             // Read operand from memory into MBR 
ALUA<-MBR                                                            // Move the operand into ALUA
ALUOP-DEC | MBR<-ALU | PZ/LD | PN/LD | P/SRC-ALU                     // Decrease the operand moving the result into MBR
MEM<-MBR | uP0                                                       // Write the MBR back to the original memory location

.opcode INC
MBR<-MEM                                                             // Read operand from memory into MBR
ALUA<-MBR                                                            // Move the operand into ALUA
ALUOP-INC | MBR<-ALU | PZ/LD | PN/LD | P/SRC-ALU                     // Increase the operand moving the result into MBR
MEM<-MBR | uP0                                                       // Write the MBR back to the original memory location

.opcode INX
ALUA<-X                                                              // Move X to ALUA 
ALUOP-INC | X<-ALU | PZ/LD | PN/LD | P/SRC-ALU | uP0                 // Add one, store result in X and set P flags

.opcode DEX
ALUA<-X                                                              // Move X to ALUA 
ALUOP-DEC | X<-ALU | PZ/LD | PN/LD | P/SRC-ALU | uP0                 // Subtract one, store result in X and set P flags

.opcode INY                                                           
ALUA<-Y                                                              // Move Y to ALUA                                     
ALUOP-INC | Y<-ALU | PZ/LD | PN/LD | P/SRC-ALU | uP0                 // Add one, store result in Y and set P flags

.opcode DEY
ALUA<-Y                                                              // Move Y to ALUA
ALUOP-DEC | Y<-ALU | PZ/LD | PN/LD | P/SRC-ALU | uP0                 // Subtract one, store result in Y and set P flags

// -----------------------------------------------------------------------------
// Flags
// -----------------------------------------------------------------------------

.opcode CLC
P/SRC-0 | PC/LD | uP0                                                // Reset carry

.opcode SEC
P/SRC-1 | PC/LD | uP0                                                // Set Carry

.opcode CLI
P/SRC-0 | PI/LD | uP0                                                // Reset interrupt disable

.opcode SEI
P/SRC-1 | PI/LD | uP0                                                // Set interrupt disable

.opcode CLV
P/SRC-0 | PV/LD | uP0                                                // Reset overflow

// TODO Implement CLD
.opcode CLD
uP0                                                                  // Do nothing as BCD mode is not implemented

// .opcode SED                                                       // BCD mode not implemented so setting D must trigger an error

// -----------------------------------------------------------------------------
// Jump and subroutine
// -----------------------------------------------------------------------------

.opcode JMP
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB address at PC, and increase PC
STASHL<-MBR                                                          // Store the LSB in STASHL
MAR<-PC | MBR<-MEM                                                   // Read the MSB address at PC, 
PCL<-STASHL                                                          // Move the LSB into PCL
PCH<-MBR | uP0                                                       // Move the MSB into PCH

// Note: Return address-1 is pushed onto the stack as per 6502
.opcode JSR
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB of the target address
STASHL<-MBR                                                          // Store the LSB in STASHL
MAR<-PC | MBR<-MEM                                                   // Read the MSB of the target address
STASHH<-MBR                                                          // Store the MSB in STASHH
MAR<-S | MBR<-PCH                                                    // Push the MSB of the PC onto the stack
MEM<-MBR | S/DEC
MAR<-S |  MBR<-PCL                                                   // Push the LSB of the PC onto the stack 
MEM<-MBR | S/DEC
PCL<-STASHL                                                          // Move the stored target address into the PC
PCH<-STASHH | uP0

.opcode RTS
S/INC                                                                // Increment the stack pointer
MAR<-S | MBR<-MEM | S/INC                                            // Move the stack pointer into MAR, read the MSB of the return address from the stack and increase the stack pointer
PCL<-MBR                                                             // Move the LSB of the return address into PCL
MAR<-S | MBR<-MEM                                                    // Move the stack pointer int MAR, read the LSB of the returns from the stack
PCH<-MBR                                                             // Move the MSB of the return address into PCH
PC-INC | uP0                                                         // Inc PC as return address-1 was pushed

// Note: This operation functions like the 6502 in that the increment of the argument to point to
// the location of the MSB of the ultimate argument is done without carry.
// So if the operand points to the last byte of a page it is bugged.
.opcode JMPIND
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB of the argument
STASHL<-MBR                                                          // And stash the LSB of the argument
MAR<-PC | MBR<-MEM | PC-INC                                          // Read the MSB of the argument
MARH<-MBR                                                            // Set MARH to point to the operand - this will remain for the rest of the instruction
MARL<-STASHL | MBR<-MEM                                              // Set MARL to point to the LSB of the operand and read the LSB of the final operand 
PCL<-MBR                                                             // And store it in PCL
ALUA<-STASHL                                                         // Load the LSB of the argument into the ALU                
ALUOP-INC | STASHL<-ALU                                              // Increase it to point to the MSB of the operand
MARL<-STASHL | MBR<-MEM                                              // Load the MSB of the final operand
PCH<-MBR | uP0                                                       // Move the MSB of the final operand into PCH

// -----------------------------------------------------------------------------
// Register load and store
// -----------------------------------------------------------------------------

.opcode LDA
MBR<-MEM                                                             // Read value at MAR 
A<-MBR | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0                        // Move value into A, setting P flags as appropriate

.opcode STA
MBR<-A                                                               // Move A into MBR
MEM<-MBR | uP0                                                       // Write MBR to memory at MAR

.opcode LDX
MBR<-MEM                                                             // Read the value at MAR
X<-MBR |  PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0                       // Move value into X                            

.opcode STX
MBR<-X                                                               // Move X into MBR
MEM<-MBR | uP0                                                       // Write MBR to memory at MAR

.opcode LDY
MBR<-MEM                                                             // Read the value at MAR
Y<-MBR |  PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0                       // Move the value into Y

.opcode STY
MBR<-Y                                                               // Move Y into MBR
MEM<-MBR | uP0                                                       // Write MBR to memory at MAR

// -----------------------------------------------------------------------------
// Register transfer
// -----------------------------------------------------------------------------

.opcode TAX
A/OUT/CDATA | X/LD/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0       // Move A to X 

.opcode TXA
X/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0       // Move X to A

.opcode TAY
A/OUT/CDATA | Y/LD/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0       // Move A to Y                                 

.opcode TYA
Y/OUT/CDATA | A/LD/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0       // Move Y to A

.opcode TXS
X/OUT/CDATA | S/LD/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0       // Move X to S

.opcode TSX
S/OUT/CDATA | PZ/LD | PN/LD | P/SRC-FLGCDATA | X/LD/CDATA | uP0       // Move S to X

// -----------------------------------------------------------------------------
// Stack
// -----------------------------------------------------------------------------

.opcode PHA
MAR<-S | MBR<-A                                                      // Copy the stack pointer to MAR and A to MBR
MEM<-MBR | S/DEC | uP0                                               // Push A onto the stack decrementing the stack pointer

.opcode PLA
S/INC                                                                // Increment the stack pointer
MAR<-S | MBR<-MEM                                                    // Read the value from the top of the stack
A<-MBR | PZ/LD | PN/LD | P/SRC-FLGCDATA | uP0                        // And move it into A

.opcode PHP
MAR<-S | P/OUT/CDATA | MBR/LD/CDATA                                  // Copy stack pointer into MAR and P to MBR
MEM<-MBR | S/DEC | uP0                                               // Push P onto the stack decrementing the stack pointer

.opcode PLP
S/INC                                                                               // Increment the stack pointer
MAR<-S | MBR<-MEM                                                                   // Read the value from the top of the stack
MBR/OUT/CDATA | P/SRC-CDATA | PN/LD | PV/LD | PB/LD | PI/LD | PZ/LD | PC/LD | uP0   // Set P from the value read from the stack


// -----------------------------------------------------------------------------
// Misc
// -----------------------------------------------------------------------------

.opcode NOP
uP0

// TODO: Add B flag, and check whether BRK really is one byte or two!
// TODO: Setting and clearing IRQ disable here - likely this is not correct!
.label IRQ
.opcode BRK

P/SRC-1 | PI/LD                                                      // Interrupt disable

                                                                     // Push P onto the stack
MAR<-S | P/OUT/CDATA | MBR/LD/CDATA                                  // Copy stack pointer into MAR and P to MBR
MEM<-MBR | S/DEC                                                     // Push P onto the stack decrementing the stack pointer
                                                                     // Push PC onto the stack
MAR<-S | MBR<-PCH                                                    // Push the MSB of the PC onto the stack
MEM<-MBR | S/DEC
MAR<-S |  MBR<-PCL                                                   // Push the LSB of the PC onto the stack 
MEM<-MBR | S/DEC

CPU/IRQ                                                              // Set PC to the IRQ vector

MAR<-PC | MBR<-MEM | PC-INC                                          // Read the LSB of the vector
STASHL<-MBR                                                          // Store the LSB in STASHL
MAR<-PC | MBR<-MEM                                                   // Read the MSB of the target address
STASHH<-MBR                                                          // Store the MSB in STASHH
                                                                
PCL<-STASHL                                                          // Jump to the target address
PCH<-STASHH | uP0                                                    // Move the stored target address into the PC

.opcode RTI
S/INC                                                                // Increment the stack pointer
MAR<-S | MBR<-MEM | S/INC                                            // Move the stack pointer into MAR, read the MSB of the return address from the stack and increase the stack pointer
PCL<-MBR                                                             // Move the LSB of the return address into PCL
MAR<-S | MBR<-MEM                                                    // Move the stack pointer int MAR, read the LSB of the returns from the stack
PCH<-MBR                                                             // Move the MSB of the return address into PCH
S/INC                                                                // Increment the stack pointer
MAR<-S | MBR<-MEM                                                    // Read the value from the top of the stack
MBR/OUT/CDATA | P/SRC-CDATA | PN/LD | PV/LD | PZ/LD | PC/LD          // Set P from the value read from the stack

P/SRC-0 | PI/LD                                                      // Interrupt enable

uP0                                                                   

