            PROCESSOR 6502

; TTL-6502 PROGRAM

Z10		= $10
Z18		= $18
Z19		= $19
Z20		= $20
Z30		= $30
Z50		= $50
ZF0		= $F0

A0400	= $1B00
A0420	= $1B20
A0450	= $1B50
A04AA	= $1BAA

;**  LED DISPLAY ON 1541 BOARD
POSTCODE	= $4001
    ORG $0
    DS $200 
	ORG $200
  
RESET
;		SEI
;		NOP


;***  1541 PART  ***
;		CLD

;**  CHECK IF JMP WORKS FINE
		LDA	#0
		STA	POSTCODE

		JMP	L999

;* SHOULD NOT BE EXECUTED AT ALL
		NOP
		SEC
L000C
		BCS	L000C
		
		NOP
L000
		JMP	M372
		
		NOP
L000A
		CLC
		LDA	#0
		RTS
		
		NOP

		
;**  TEST BRANCHES WITH ALL FLAGS SET
L005
		LDA	#1
		STA	POSTCODE

		LDX	#$FF
		TXS

		LDA	#$FF
		PHA
		PLP			; SET ALL FLAGS

;!! REMARK: IF AN ERROR OCCURS, DON'T FORGET THAT ONE OF THE ABOVE INSTRUCTIONS
;           COULD HAVE BEEN THE CAUSE INSTEAD.
L001
		BCC	L001
L002
		BNE	L002
L003
		BVC	L003
L004
		BPL	L004

		BMI	L006		; MUST BRANCH, ELSE ERROR
L004A
		JMP	L004A		; ERROR, ->
L006
		BEQ	L007		; MUST BRANCH, ELSE ERROR
L006A
		JMP	L006A		; ERROR, ->
L007
		BVS	L008		; MUST BRANCH, ELSE ERROR
L007A
		JMP	L007A		; ERROR, ->
L008
		BCS	L010		; MUST BRANCH, ELSE ERROR
L008A
		JMP	L008A		; ERROR, ->

;**  TEST BRANCHES WITH ALL FLAGS RESET
L010
		LDA	#2
		STA	POSTCODE

		LDA	#0
		PHA
		PLP			; RESET ALL FLAGS
L011
		BCS	L011
L012
		BEQ	L012
L013
		BVS	L013
L014
		BMI	L014

		BCC	L015		; MUST BRANCH, ELSE ERROR
L014A
		JMP	L014A		; ERROR, ->
L015
		BNE	L016		; MUST BRANCH, ELSE ERROR
L015A
		JMP	L015A		; ERROR, ->
L016
		BVC	L017		; MUST BRANCH, ELSE ERROR
L016A
		JMP	L016A		; ERROR, ->
L017
		BPL	L020		; MUST BRANCH, ELSE ERROR
L017A
		JMP	L017A		; ERROR, ->


;**  TEST SEC, CLC AND CLV
L020
		LDA	#3
		STA	POSTCODE
L020C
		BEQ	L020C		; MUST SKIP, ELSE ERROR

		BNE	L020E		; MUST BRANCH, ELSE ERROR
L020D
		JMP	L020D
L020E
		SEC
L020A
		BCC	L020A		; ERROR, ->

		BCS	L021		; MUST BRANCH, ELSE ERROR
L020B
		JMP	L020B		; ERROR, ->

L021
		CLC
L021A
		BCS	L021A		; ERROR, ->

		BCC	L022		; MUST BRANCH, ELSE ERROR
L021B
		JMP	L021B		; ERROR, ->

L022
		CLV
L022A
		BVS	L022A		; ERROR, ->

		BVC	L030		; MUST BRANCH, ELSE ERROR
L022B
		JMP	L022B		; ERROR, ->


;**  TEST LDA/X/Y #N, STA/X/Y $XX/$XXXX
L030
		LDA	#4
		STA	POSTCODE

		LDA	#0
		
; THIS JUST CHECKS THE ALU, NOT A
L031
		BNE	L031		; ERROR, ->
L032
		BMI	L032		; ERROR, ->

; TEST THE CONTENT OF A
		CMP	#0
L031A
		BNE	L031A		; ERROR, ->

		STA	Z10
		STA	A0400

		LDA	#$80

; THIS JUST CHECKS THE ALU, NOT A
L033
		BEQ	L033		; ERROR, ->
L034
		BPL	L034		; ERROR, ->

; TEST THE CONTENT OF A
		CMP	#$80
L035
		BNE	L035		; ERROR, ->

		STA	Z10+1
		STA	A0400+1

		LDX	#0
		CPX	#0
L036
		BNE	L036		; ERROR, ->

		STX	Z10+2
		STX	A0400+2

;**  TEST BRANCH AROUND PAGE BORDER  ==>
		CLC
		BCC	L40M

L40B
		SEC
		BCS	L40Z
		
		NOP
		NOP

L40M
		BCC	L40B
						
L40Z
; <==


		LDX	#$80
		CPX	#$80
L037
		BNE	L037		; ERROR, ->

		STX	Z10+3
		STX	A0400+3

		LDY	#0
		CPY	#0
L038
		BNE	L038		; ERROR, ->

		STY	Z10+4
		STY	A0400+4

		LDY	#$80
		CPY	#$80
L039
		BNE	L039		; ERROR, ->

		STY	Z10+5
		STY	A0400+5


;**  TEST LDA/X/Y $XX
		LDA	#5
		STA	POSTCODE

		LDA	Z10
		CMP	#0
L039E
		BNE	L039E		; ERROR, ->

		LDA	#0
		LDA	Z10+1
		CMP	#$80
L039G
		BNE	L039G		; ERROR, ->


		LDX	#5
		LDX	Z10
		CPX	#0
L039I
		BNE	L039I		; ERROR, ->


		LDX	#0
		LDX	Z10+1
		CPX	#$80
L039K
		BNE	L039K		; ERROR, ->


		LDY	#5
		LDY	Z10
		CPY	#0
L039M
		BNE	L039M		; ERROR, ->


		LDY	#0
		LDY	Z10+1
		CPY	#$80
L039O
		BNE	L039O		; ERROR, ->


;**  TEST LDA/X/Y $XXXX
		LDA	#6
		STA	POSTCODE

		LDA	A0400
		CMP	#0
L041
		BNE	L041		; ERROR, ->


		LDA	A0400+1
		CMP	#$80
L043
		BNE	L043		; ERROR, ->


		LDX	A0400
		CPX	#0
L044
		BNE	L044		; ERROR, ->


		LDX	A0400+1
		CPX	#$80
L044C
		BNE	L044C		; ERROR, ->


		LDY	A0400
		CPY	#0
L044E
		BNE	L044E		; ERROR, ->

		LDY	A0400+1
		CPY	#$80
L044G
		BNE	L044G		; ERROR, ->


;**  TEST CMP/CPX/CPY
;* REGISTER = VALUE
		LDX	#0
		LDY	#0
		LDA	#7
		STA	POSTCODE
		STA	Z10
		STA	A0400
		CMP	#7
L051
		BNE	L051		; ERROR, ->
L052
		BCC	L052		; ERROR, ->
L053
		BMI	L053		; ERROR, ->


		CMP	Z10
L051A
		BNE	L051A		; ERROR, ->
L052A
		BCC	L052A		; ERROR, ->
L053A
		BMI	L053A		; ERROR, ->


		CMP	A0400
L051B
		BNE	L051B		; ERROR, ->
L052B
		BCC	L052B		; ERROR, ->
L053B
		BMI	L053B		; ERROR, ->


		LDX	#7
		CPX	#7
L051C
		BNE	L051C		; ERROR, ->
L052C
		BCC	L052C		; ERROR, ->
L053C
		BMI	L053C		; ERROR, ->


		CPX	Z10
L051D
		BNE	L051D		; ERROR, ->
L052D
		BCC	L052D		; ERROR, ->
L053D
		BMI	L053D		; ERROR, ->


		CPX	A0400
L051E
		BNE	L051E		; ERROR, ->
L052E
		BCC	L052E		; ERROR, ->
L053E
		BMI	L053E		; ERROR, ->


		LDY	#7
		CPY	#7
L051F
		BNE	L051F		; ERROR, ->
L052F
		BCC	L052F		; ERROR, ->
L053F
		BMI	L053F		; ERROR, ->


		CPY	Z10
L051G
		BNE	L051G		; ERROR, ->
L052G
		BCC	L052G		; ERROR, ->
L053G
		BMI	L053G		; ERROR, ->


		CPY	A0400
L051H
		BNE	L051H		; ERROR, ->
L052H
		BCC	L052H		; ERROR, ->
L053H
		BMI	L053H		; ERROR, ->

;* REGISTER > MEMORY
		LDA	#8
		STA	POSTCODE

		CMP	#7
L061
		BEQ	L061		; ERROR, ->
L062
		BCC	L062		; ERROR, ->
L063
		BMI	L063		; ERROR, ->


		CMP	Z10
L061A
		BEQ	L061A		; ERROR, ->
L062A
		BCC	L062A		; ERROR, ->
L063A
		BMI	L063A		; ERROR, ->


		CMP	A0400
L061B
		BEQ	L061B		; ERROR, ->
L062B
		BCC	L062B		; ERROR, ->
L063B
		BMI	L063B		; ERROR, ->


		LDX	#8
		CPX	#7
L061C
		BEQ	L061C		; ERROR, ->
L062C
		BCC	L062C		; ERROR, ->
L063C
		BMI	L063C		; ERROR, ->


		CPX	Z10
L061D
		BEQ	L061D		; ERROR, ->
L062D
		BCC	L062D		; ERROR, ->
L063D
		BMI	L063D		; ERROR, ->


		CPX	A0400
L061E
		BEQ	L061E		; ERROR, ->
L062E
		BCC	L062E		; ERROR, ->
L063E
		BMI	L063E		; ERROR, ->


		LDY	#8
		CPY	#7
L061F
		BEQ	L061F		; ERROR, ->
L062F
		BCC	L062F		; ERROR, ->
L063F
		BMI	L063F		; ERROR, ->


		CPY	Z10
L061G
		BEQ	L061G		; ERROR, ->
L062G
		BCC	L062G		; ERROR, ->
L063G
		BMI	L063G		; ERROR, ->


		CPY	A0400
L061H
		BEQ	L061H		; ERROR, ->
L062H
		BCC	L062H		; ERROR, ->
L063H
		BMI	L063H		; ERROR, ->


;* REGISTER < MEMORY
		LDA	#5
		CMP	#7
L071
		BEQ	L071		; ERROR, ->
L072
		BCS	L072		; ERROR, ->
L073
		BPL	L073		; ERROR, ->


		CMP	Z10
L071A
		BEQ	L071A		; ERROR, ->
L072A
		BCS	L072A		; ERROR, ->
L073A
		BPL	L073A		; ERROR, ->


		LDX	#5
		CPX	#7
L071B
		BEQ	L071B		; ERROR, ->
L072B
		BCS	L072B		; ERROR, ->
L073B
		BPL	L073B		; ERROR, ->


		CPX	Z10
L071C
		BEQ	L071C		; ERROR, ->
L072C
		BCS	L072C		; ERROR, ->
L073C
		BPL	L073C		; ERROR, ->


		CPX	A0400
L071D
		BEQ	L071D		; ERROR, ->
L072D
		BCS	L072D		; ERROR, ->
L073D
		BPL	L073D		; ERROR, ->


		LDY	#5
		CPY	#7
L071E
		BEQ	L071E		; ERROR, ->
L072E
		BCS	L072E		; ERROR, ->
L073E
		BPL	L073E		; ERROR, ->


		CPY	Z10
L071F
		BEQ	L071F		; ERROR, ->
L072F
		BCS	L072F		; ERROR, ->
L073F
		BPL	L073F		; ERROR, ->


		CPY	A0400
L071G
		BEQ	L071G		; ERROR, ->
L072G
		BCS	L072G		; ERROR, ->
L073G
		BPL	L073G		; ERROR, ->


;**  TAX, TXA
		LDA	#9
		STA	POSTCODE

		LDX	#0
		LDA	#$AA
		TAX
L081
		BPL	L081		; ERROR, ->
L082
		BEQ	L082		; ERROR, ->

		CPX	#$AA
L083
		BNE	L083		; ERROR, ->


		LDA	#$0A
		STA	POSTCODE

		TXA
L084
		BPL	L084		; ERROR, ->
L085
		BEQ	L085		; ERROR, ->

		CMP	#$AA
L086
		BNE	L086		; ERROR, ->


		LDA	#$0B
		STA	POSTCODE

		LDA	#$55
		TAX
L087
		BMI	L087		; ERROR, ->
L088
		BEQ	L088		; ERROR, ->

		CPX	#$55
L089
		BNE	L089		; ERROR, ->


		LDA	#$0C
		STA	POSTCODE

		TXA
L089A
		BMI	L089A		; ERROR, ->
L089B
		BEQ	L089B		; ERROR, ->


		CMP	#$55
L089C
		BNE	L089C		; ERROR, ->


		LDA	#$0D
		STA	POSTCODE

		LDA	#0
		TAX
L089D
		BMI	L089D		; ERROR, ->
L089E
		BNE	L089E		; ERROR, ->


		CPX	#0
L089F
		BNE	L089F		; ERROR, ->


		LDA	#$0E
		STA	POSTCODE

		TXA
L089G
		BMI	L089G		; ERROR, ->
L089H
		BNE	L089H		; ERROR, ->


		CMP	#0
L089I
		BNE	L089I		; ERROR, ->


;**  TAY, TYA
		LDA	#$0F
		STA	POSTCODE

		LDY	#0
		LDA	#$AA
		TAY
L091
		BPL	L091		; ERROR, ->
L092
		BEQ	L092		; ERROR, ->


		CPY	#$AA
L093
		BNE	L093		; ERROR, ->


		LDA	#$10
		STA	POSTCODE

		TYA
L091A
		BPL	L091A		; ERROR, ->
L092A
		BEQ	L092A		; ERROR, ->


		CMP	#$AA
L093A
		BNE	L093A		; ERROR, ->


		LDA	#$11
		STA	POSTCODE

		LDA	#$55
		TAY
L091B
		BMI	L091B		; ERROR, ->
L092B
		BEQ	L092B		; ERROR, ->


		CPY	#$55
L093B
		BNE	L093B		; ERROR, ->


		LDA	#$12
		STA	POSTCODE

		TYA
L091C
		BMI	L091C		; ERROR, ->
L092C
		BEQ	L092C		; ERROR, ->


		CMP	#$55
L093C
		BNE	L093C		; ERROR, ->


		LDA	#$13
		STA	POSTCODE

		LDA	#0
		TAY
L091D
		BMI	L091D		; ERROR, ->
L092D
		BNE	L092D		; ERROR, ->


		CPY	#0
L093D
		BNE	L093D		; ERROR, ->


		LDA	#$14
		STA	POSTCODE

		TYA
L091E
		BMI	L091		; ERROR, ->
L092E
		BNE	L092E		; ERROR, ->


		CMP	#0
L093E
		BNE	L093E		; ERROR, ->


;**  TXS, TSX
		LDA	#$15
		STA	POSTCODE

		LDX	#$AA
		TXS
L101
		BPL	L101		; ERROR, ->
L102
		BEQ	L102		; ERROR, ->


		LDX	#0
		TSX
L103
		BPL	L103		; ERROR, ->
L104
		BEQ	L104		; ERROR, ->


		CPX	#$AA
L105
		BNE	L105		; ERROR, ->


		LDA	#$16
		STA	POSTCODE

		LDX	#$55
		TXS
L103A
		BMI	L103A		; ERROR, ->
L104A
		BEQ	L104A		; ERROR, ->


		LDX	#0
		TSX
L103B
		BMI	L103B		; ERROR, ->
L104B
		BEQ	L104B		; ERROR, ->


		CPX	#$55
L105B
		BNE	L105B		; ERROR, ->


		LDA	#$17
		STA	POSTCODE

		LDX	#0
		TXS
L103C
		BMI	L103C		; ERROR, ->
L104C
		BNE	L104C		; ERROR, ->


		LDX	#$55
		TSX
L103D
		BMI	L103D		; ERROR, ->
L104D
		BNE	L104D		; ERROR, ->


		CPX	#0
L105D
		BNE	L105D		; ERROR, ->


;**  PHA, PLA
		LDA	#$17
		STA	POSTCODE

		LDA	#$AA
		PHA

		LDA	#0
		PLA
L111
		BEQ	L111		; ERROR, ->
L112
		BPL	L112		; ERROR, ->

		CMP	#$AA
L112B
		BNE	L112B		; ERROR, ->


		LDA	#$18
		STA	POSTCODE

		LDA	#$55
		PHA

		LDA	#0
		PLA
L113
		BEQ	L113		; ERROR, ->
L114
		BMI	L114		; ERROR, ->

		CMP	#$55
L114B
		BNE	L114B		; ERROR, ->


		LDA	#$19
		STA	POSTCODE

		LDA	#0
		PHA

		LDA	#$55
		PLA
L115
		BNE	L115		; ERROR, ->
L116
		BMI	L116		; ERROR, ->

		CMP	#0
L116B
		BNE	L116B		; ERROR, ->


;**  DEX
		LDA	#$1A
		STA	POSTCODE

		LDX	#$81
		DEX
L121
		BEQ	L121		; ERROR, ->
L122
		BPL	L122		; ERROR, ->

		CPX	#$80
L122Z
		BNE	L122Z		; ERROR, ->


		DEX
L121A
		BEQ	L121A		; ERROR, ->
L122A
		BMI	L122A		; ERROR, ->

		CPX	#$7F
L122Y
		BNE	L122Y		; ERROR, ->


		LDA	#$1B
		STA	POSTCODE

		LDX	#2
		DEX
L121B
		BEQ	L121B		; ERROR, ->
L122B
		BMI	L122B		; ERROR, ->

		CPX	#1
L122X
		BNE	L122X		; ERROR, ->


		DEX
L121C
		BNE	L121C		; ERROR, ->
L122C
		BMI	L122C		; ERROR, ->

		CPX	#0
L122W
		BNE	L122W		; ERROR, ->


		DEX
L121D
		BEQ	L121D		; ERROR, ->
L122D
		BPL	L122D		; ERROR, ->

		CPX	#$FF
L122V
		BNE	L122V		; ERROR, ->


;**  INX
		LDA	#$1C
		STA	POSTCODE

		LDX	#$FE
		INX
L121E
		BEQ	L121E		; ERROR, ->
L122E
		BPL	L122E		; ERROR, ->

		CPX	#$FF
L122U
		BNE	L122U		; ERROR, ->


		INX
L121F
		BNE	L121F		; ERROR, ->
L122F
		BMI	L122F		; ERROR, ->

		CPX	#0
L122T
		BNE	L122T		; ERROR, ->


		INX
L121G
		BEQ	L121G		; ERROR, ->
L122G
		BMI	L122G		; ERROR, ->

		CPX	#1
L122S
		BNE	L122S		; ERROR, ->


		LDA	#$1D
		STA	POSTCODE

		LDX	#$7E
		INX
L121H
		BEQ	L121H		; ERROR, ->
L122H
		BMI	L122H		; ERROR, ->

		CPX	#$7F
L122R
		BNE	L122R		; ERROR, ->


		INX
L121I
		BEQ	L121I		; ERROR, ->
L122I
		BPL	L122I		; ERROR, ->

		CPX	#$80
L122Q
		BNE	L122Q		; ERROR, ->


;**  DEY
		LDA	#$1E
		STA	POSTCODE

		LDY	#$81
		DEY
L131
		BEQ	L131		; ERROR, ->
L132
		BPL	L132		; ERROR, ->

		CPY	#$80
L132Z
		BNE	L132Z		; ERROR, ->


		DEY
L131A
		BEQ	L131A		; ERROR, ->
L132A
		BMI	L132A		; ERROR, ->

		CPY	#$7F
L132Y
		BNE	L132Y		; ERROR, ->


		LDA	#$1F
		STA	POSTCODE

		LDY	#2
		DEY
L131B
		BEQ	L131B		; ERROR, ->
L132B
		BMI	L132B		; ERROR, ->

		CPY	#1
L132X
		BNE	L132X		; ERROR, ->


		DEY
L131C
		BNE	L131C		; ERROR, ->
L132C
		BMI	L132C		; ERROR, ->

		CPY	#0
L132W
		BNE	L132W		; ERROR, ->


		DEY
L131D
		BEQ	L131D		; ERROR, ->
L132D
		BPL	L132D		; ERROR, ->

		CPY	#$FF
L132V
		BNE	L132V		; ERROR, ->


;**  INY
		LDA	#$20
		STA	POSTCODE

		LDY	#$FE
		INY
L131E
		BEQ	L131E		; ERROR, ->
L132E
		BPL	L132E		; ERROR, ->

		CPY	#$FF
L132U
		BNE	L132U		; ERROR, ->


		INY
L131F
		BNE	L131F		; ERROR, ->
L132F
		BMI	L132F		; ERROR, ->

		CPY	#0
L132T
		BNE	L132T		; ERROR, ->


		INY
L131G
		BEQ	L131G		; ERROR, ->
L132G
		BMI	L132G		; ERROR, ->

		CPY	#1
L132S
		BNE	L132S		; ERROR, ->


		LDA	#$21
		STA	POSTCODE

		LDY	#$7E
		INY
L131H
		BEQ	L131H		; ERROR, ->
L132H
		BMI	L132H		; ERROR, ->

		CPY	#$7F
L132R
		BNE	L132R		; ERROR, ->


		INY
L131I
		BEQ	L131I		; ERROR, ->
L132I
		BPL	L132I		; ERROR, ->

		CPY	#$80
L132Q
		BNE	L132Q		; ERROR, ->


;**  LDA INDEXED  (1)
;* LDA $XX,X
		LDA	#$22
		STA	POSTCODE

		LDA	#$A3
		STA	Z50

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20,X
L141
		BEQ	L141		; ERROR, ->
L142
		BPL	L142		; ERROR, ->

		CMP	#$A3
L143
		BNE	L143		; ERROR, ->


		LDA	#$23
		STA	POSTCODE

		LDA	#$A9
		STA	Z20

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	ZF0,X
L141A
		BEQ	L141A		; ERROR, ->
L142A
		BPL	L142A		; ERROR, ->

		CMP	#$A9
L143A
		BNE	L143A		; ERROR, ->


		LDA	#$24
		STA	POSTCODE

		LDA	#$33
		STA	Z50

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20,X
L141B
		BEQ	L141B		; ERROR, ->
L142B
		BMI	L142B		; ERROR, ->

		CMP	#$33
L143B
		BNE	L143B		; ERROR, ->


		LDA	#$25
		STA	POSTCODE

		LDA	#$35
		STA	Z20

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	ZF0,X
L141C
		BEQ	L141C		; ERROR, ->
L142C
		BMI	L142C		; ERROR, ->

		CMP	#$35
L143C
		BNE	L143C		; ERROR, ->


		LDA	#$26
		STA	POSTCODE

		LDA	#0
		STA	Z50

		LDX	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20,X
L141D
		BNE	L141D		; ERROR, ->
L142D
		BMI	L142D		; ERROR, ->

		CMP	#0
L143D
		BNE	L143D		; ERROR, ->


		LDA	#$27
		STA	POSTCODE

		LDA	#0
		STA	Z20

		LDX	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	ZF0,X
L141E
		BNE	L141E		; ERROR, ->
L142E
		BMI	L142E		; ERROR, ->

		CMP	#0
L143E
		BNE	L143E		; ERROR, ->


;* LDA $XXXX,X
		LDA	#$28
		STA	POSTCODE

		LDA	#$AA
		STA	A0450

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,X
L151
		BEQ	L151		; ERROR, ->
L152
		BPL	L152		; ERROR, ->

		CMP	#$AA
L153
		BNE	L153		; ERROR, ->


		LDA	#$29
		STA	POSTCODE

		LDA	#$33
		STA	A0450

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,X
L151A
		BEQ	L151A		; ERROR, ->
L152A
		BMI	L152A		; ERROR, ->

		CMP	#$33
L153A
		BNE	L153A		; ERROR, ->


		LDA	#$2A
		STA	POSTCODE

		LDA	#0
		STA	A0450

		LDX	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,X
L151B
		BNE	L151B		; ERROR, ->
L152B
		BMI	L152B		; ERROR, ->

		CMP	#0
L153B
		BNE	L153B		; ERROR, ->


;* LDA $XXXX,Y
		LDA	#$2B
		STA	POSTCODE

		LDA	#$AA
		STA	A0450

		LDY	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,Y
L161
		BEQ	L161		; ERROR, ->
L162
		BPL	L162		; ERROR, ->

		CMP	#$AA
L163
		BNE	L163		; ERROR, ->


		LDA	#$2C
		STA	POSTCODE

		LDA	#$33
		STA	A0450

		LDY	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,Y
L161A
		BEQ	L161A		; ERROR, ->
L162A
		BMI	L162A		; ERROR, ->

		CMP	#$33
L163A
 		BNE	L163A		; ERROR, ->


		LDA	#$2D
		STA	POSTCODE

		LDA	#0
		STA	A0450

		LDY	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0420,Y
L161B
		BNE	L161B		; ERROR, ->
L162B
		BMI	L162B		; ERROR, ->

		CMP	#0
L163B
		BNE	L163B		; ERROR, ->

			
;**  STA INDEXED  (1)
;* STA $XX,X
		LDA	#$2E
		STA	POSTCODE
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$CA
		STA	Z20,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z50
		CMP	#$CA
L171
		BNE	L171		; ERROR, ->


		LDA	#$2F
		STA	POSTCODE

		LDX	#$30
		LDA	#$AC
		STA	ZF0,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20
		CMP	#$AC
L172
		BNE	L172		; ERROR, ->


		LDA	#$30
		STA	POSTCODE

		LDX	#$30
		LDA	#$5A
		STA	Z20,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z50
		CMP	#$5A
L173
		BNE	L173		; ERROR, ->


		LDA	#$31
		STA	POSTCODE

		LDX	#$30
		LDA	#$5C
		STA	ZF0,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20
		CMP	#$5C
L174
		BNE	L174		; ERROR, ->


		LDA	#$32
		STA	POSTCODE

		LDX	#$30
		LDA	#0
		STA	Z20,X

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z50
L175
		BNE	L175		; ERROR, ->


		LDA	#$33
		STA	POSTCODE

		LDX	#$30
		LDA	#0
		STA	ZF0,X

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	Z20
L176
		BNE	L176		; ERROR, ->


;* STA $XXXX,X
		LDA	#$34
		STA	POSTCODE
		STA	A0450

		LDX	#$30
		LDA	#$AA
		STA	A0420,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
		CMP	#$AA
L177
		BNE	L177		; ERROR, ->


		LDA	#$35
		STA	POSTCODE
		STA	A0450

		LDX	#$30
		LDA	#$55
		STA	A0420,X

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
		CMP	#$55
L178
		BNE	L178		; ERROR, ->


		LDA	#$36
		STA	POSTCODE
		STA	A0450

		LDX	#$30
		LDA	#0
		STA	A0420,X

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
L179
		BNE	L179		; ERROR, ->


;* STA $XXXX,Y
		LDA	#$37
		STA	POSTCODE
		STA	A0450

		LDY	#$30
		LDA	#$AA
		STA	A0420,Y

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
		CMP	#$AA
L179A
		BNE	L179A		; ERROR, ->


		LDA	#$38
		STA	POSTCODE
		STA	A0450

		LDY	#$30
		LDA	#$55
		STA	A0420,Y

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
		CMP	#$55
L179B
		BNE	L179B		; ERROR, ->


		LDA	#$39
		STA	POSTCODE
		STA	A0450

		LDY	#$30
		LDA	#0
		STA	A0420,Y

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A0450
L179C
		BNE	L179C		; ERROR, ->


;**  LDA INDEXED  (2)
;* LDA ($XX,X)
		LDA	#$3A
		STA	POSTCODE

		LDA	#<(A04AA)
		STA	Z50
		STA	A04AA

		LDA	#>(A04AA)
		STA	Z50+1

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z20,X)
L181
		BEQ	L181		; ERROR, ->
L182
		BPL	L182		; ERROR, ->

		CMP	#$AA
L183
		BNE	L183		; ERROR, ->


		LDA	#$3B
		STA	POSTCODE

		LDA	#<(A04AA)
		STA	Z20

		LDA	#>(A04AA)
		STA	Z20+1

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(ZF0,X)
L181A
		BEQ	L181A		; ERROR, ->
L182A
		BPL	L182A		; ERROR, ->

		CMP	#$AA
L183A
		BNE	L183A		; ERROR, ->


		LDA	#$3C
		STA	POSTCODE

		LDA	#$33
		STA	A04AA

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z20,X)
L181B
		BEQ	L181B		; ERROR, ->
L182B
		BMI	L182B		; ERROR, ->

		CMP	#$33
L183B
		BNE	L183B		; ERROR, ->


		LDA	#$3D
		STA	POSTCODE

		LDA	#$33
		STA	A04AA

		LDX	#$30
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(ZF0,X)
L181C
		BEQ	L181C		; ERROR, ->
L182C
		BMI	L182C		; ERROR, ->

		CMP	#$33
L183C
		BNE	L183C		; ERROR, ->


		LDA	#$3E
		STA	POSTCODE

		LDA	#0
		STA	A04AA

		LDX	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z20,X)
L181D
		BNE	L181D		; ERROR, ->
L182D
		BMI	L182D		; ERROR, ->

		CMP	#0
L183D
		BNE	L183D		; ERROR, ->


		LDA	#$3F
		STA	POSTCODE

		LDA	#0
		STA	A04AA

		LDX	#$30
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(ZF0,X)
L181E
		BNE	L181E		; ERROR, ->
L182E
		BMI	L182E		; ERROR, ->

		CMP	#0
L183E
		BNE	L183E		; ERROR, ->


;* LDA ($XX),Y
		LDA	#$40
		STA	POSTCODE

		LDA	#$AA
		STA	A04AA

		LDA	#0
		STA	Z50

		LDA	#>(A04AA)
		STA	Z50+1

		LDY	#<(A04AA)
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z50),Y
L191
		BEQ	L191		; ERROR, ->
L192
		BPL	L192		; ERROR, ->

		CMP	#$AA
L193
		BNE	L193		; ERROR, ->


		LDA	#$41
		STA	POSTCODE

		LDA	#$55
		STA	A04AA

		LDY	#<(A04AA)
		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z50),Y
L194
		BEQ	L194		; ERROR, ->
L195
		BMI	L195		; ERROR, ->


		CMP	#$55
L196
		BNE	L196		; ERROR, ->


		LDA	#$42
		STA	POSTCODE

		LDA	#0
		STA	A04AA

		LDY	#<(A04AA)
		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	(Z50),Y
L197
		BNE	L197		; ERROR, ->
L198
		BMI	L198		; ERROR, ->

		CMP	#0
L199
		BNE	L199		; ERROR, ->


;**  STA INDEXED  (2)
;* STA ($XX,X)
		LDA	#$43
		STA	POSTCODE
		STA	A04AA

		LDA	#>(A04AA)
		STA	Z50+1

		LDA	#<(A04AA)
		STA	Z50

		LDX	#$30
		STA	(Z20,X)

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$AA
L201
		BNE	L201		; ERROR, ->


		LDA	#$44
		STA	POSTCODE
		STA	A04AA

		LDA	#$AA
		STA	Z20

		LDA	#>(A0400)
		STA	Z20+1

		LDX	#$30
		LDA	#$AA
		STA	(ZF0,X)

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$AA
L202
		BNE	L202		; ERROR, ->


		LDA	#$45
		STA	POSTCODE
		STA	A04AA

		LDX	#$30
		LDA	#$55
		STA	(Z20,X)

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$55
L203
		BNE	L203		; ERROR, ->


		LDA	#$46
		STA	POSTCODE
		STA	A04AA

		LDX	#$30
		LDA	#$55
		STA	(ZF0,X)

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$55
L204
		BNE	L204		; ERROR, ->


		LDA	#$47
		STA	POSTCODE
		STA	A04AA

		LDX	#$30
		LDA	#0
		STA	(Z20,X)

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#0
L205
		BNE	L205		; ERROR, ->


		LDA	#$47
		STA	POSTCODE
		STA	A04AA

		LDA	#0
		STA	(ZF0,X)

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
L206
		BNE	L206		; ERROR, ->


;* STA ($XX),Y
		LDA	#$49
		STA	POSTCODE
		STA	A04AA

		LDA	#>(A04AA)
		STA	Z19

		LDA	#0
		STA	Z18

		LDY	#<(A04AA)
		LDA	#$AA
		STA	(Z18),Y

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$AA
L211
		BNE	L211		; ERROR, ->


		LDA	#$4A
		STA	POSTCODE
		STA	A04AA
 
		LDY	#<(A04AA)
		LDA	#$55
		STA	(Z18),Y

		LDA	#0		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
		CMP	#$55
L212
		BNE	L212		; ERROR, ->

		LDA	#$56 ;4B
		STA	POSTCODE
		STA	A04AA

		LDY	#<(A04AA)
		LDA	#0
		STA	(Z18),Y

		LDA	#$FF		; WIPE ORIGINAL VALUE/FLAGS
		LDA	A04AA
L213
		BNE	L213		; ERROR, ->


;**  ADC  (1)
;  CLC 		; $30 + $30 = $60, RETURNS C = 0, RETURNS V = 0
;  LDA #$30
;  ADC #$30

		LDA	#$4C
		STA	POSTCODE
		
		CLD

		LDA	#$30
		STA	Z10
		STA	A0400

		CLC
		ADC	#$30
L221
		BCS	L221		; ERROR, ->
L222
		BVS	L222		; ERROR, ->
L223
		BEQ	L223		; ERROR, ->
L224
		BMI	L224		; ERROR, ->

		CMP	#$60
L225
		BNE	L225		; ERROR, ->


		LDA	#$4D
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	Z10
L221A
		BCS	L221A		; ERROR, ->
L222A
		BVS	L222A		; ERROR, ->
L223A
		BEQ	L223A		; ERROR, ->
L224A
		BMI	L224A		; ERROR, ->

		CMP	#$60
L225A
		BNE	L225A		; ERROR, ->


		LDA	#$4E
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	A0400
L221B
		BCS	L221B		; ERROR, ->
L222B
		BVS	L222B		; ERROR, ->
L223B
		BEQ	L223B		; ERROR, ->
L224B
		BMI	L224B		; ERROR, ->

		CMP	#$60
L225B
		BNE	L225B		; ERROR, ->


		LDA	#$4F
		STA	POSTCODE

		LDA	#$30
		TAX
		STA	Z30,X

		CLC
		ADC	Z30,X
L221C
		BCS	L221C		; ERROR, ->
L222C
		BVS	L222C		; ERROR, ->
L223C
		BEQ	L223C		; ERROR, ->
L224C
		BMI	L224C		; ERROR, ->

		CMP	#$60
L225C
		BNE	L225C		; ERROR, ->


		LDA	#$50
		STA	POSTCODE

		LDA	#$30
		TAX
		STA	A0400,X

		CLC
		ADC	A0400,X
L221D
		BCS	L221D		; ERROR, ->
L222D
		BVS	L222D		; ERROR, ->
L223D
		BEQ	L223D		; ERROR, ->
L224D
		BMI	L224D		; ERROR, ->

		CMP	#$60
L225D
		BNE	L225D		; ERROR, ->


		LDA	#$51
		STA	POSTCODE

		LDA	#$30
		TAY
		STA	A0400,Y

		CLC
		ADC	A0400,Y
L221E
		BCS	L221E		; ERROR, ->
L222E
		BVS	L222E		; ERROR, ->
L223E
		BEQ	L223E		; ERROR, ->
L224E
		BMI	L224E		; ERROR, ->

		CMP	#$60
L225E
		BNE	L225E		; ERROR, ->


		LDA	#$52
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		TXA
		STA	(Z20,X)

		CLC
		ADC	(Z20,X)
L221F
		BCS	L221F		; ERROR, ->
L222F
		BVS	L222F		; ERROR, ->
L223F
		BEQ	L223F		; ERROR, ->
L224F
		BMI	L224F		; ERROR, ->

		CMP	#$60
L225F
		BNE	L225F		; ERROR, ->


		LDA	#$53
		STA	POSTCODE

		LDX	#$30
		LDA	#$30
		STA	(ZF0,X)

		CLC
		ADC	(ZF0,X)
L221G
		BCS	L221G		; ERROR, ->
L222G
		BVS	L222G		; ERROR, ->
L223G
		BEQ	L223G		; ERROR, ->
L224G
		BMI	L224G		; ERROR, ->

		CMP	#$60
L225G
		BNE	L225G		; ERROR, ->


;  CLC 		; $30 + $D0 = $00, RETURNS C = 1, RETURNS V = 0
;  LDA #$30
;  ADC #$D0

		LDA	#$54
		STA	POSTCODE

		LDA	#$D0
		STA	Z10
		STA	A0400

		CLC
		LDA	#$30
		ADC	#$D0
L231
		BCC	L231		; ERROR, ->
L232
		BVS	L232		; ERROR, ->
L233
		BNE	L233		; ERROR, ->
L234
		BMI	L234		; ERROR, ->

		CMP	#0
L235
		BNE	L235		; ERROR, ->


		LDA	#$55
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	Z10
L231A
		BCC	L231A		; ERROR, ->
L232A
		BVS	L232A		; ERROR, ->
L233A
		BNE	L233A		; ERROR, ->
L234A
		BMI	L234A		; ERROR, ->

		CMP	#0
L235A
		BNE	L235A		; ERROR, ->


		LDA	#$56
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	A0400
L231B
		BCC	L231B		; ERROR, ->
L232B
		BVS	L232B		; ERROR, ->
L233B
		BNE	L233B		; ERROR, ->
L234B
		BMI	L234B		; ERROR, ->

		CMP	#0
L235B
		BNE	L235B		; ERROR, ->


		LDA	#$57
		STA	POSTCODE

		LDX	#$30
		LDA	#$D0
		STA	Z30,X

		CLC
		LDA	#$30
		ADC	Z30,X
L231C
		BCC	L231C		; ERROR, ->
L232C
		BVS	L232C		; ERROR, ->
L233C
		BNE	L233C		; ERROR, ->
L234C
		BMI	L234C		; ERROR, ->

		CMP	#0
L235C
		BNE	L235C		; ERROR, ->


		LDA	#$58
		STA	POSTCODE

		LDX	#$30
		LDA	#$D0
		STA	A0400,X

		CLC
		LDA	#$30
		ADC	A0400,X
L231D
		BCC	L231D		; ERROR, ->
L232D
		BVS	L232D		; ERROR, ->
L233D
		BNE	L233D		; ERROR, ->
L234D
		BMI	L234D		; ERROR, ->

		CMP	#0
L235D
		BNE	L235D		; ERROR, ->


		LDA	#$59
		STA	POSTCODE

		LDY	#$30
		LDA	#$D0
		STA	A0400,Y

		CLC
		LDA	#$30
		ADC	A0400,Y
L231E
		BCC	L231E		; ERROR, ->
L232E
		BVS	L232E		; ERROR, ->
L233E
		BNE	L233E		; ERROR, ->
L234E
		BMI	L234E		; ERROR, ->

		CMP	#0
L235E
		BNE	L235E		; ERROR, ->


		LDA	#$5A
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$D0
		STA	(Z20,X)

		CLC
		LDA	#$30
		ADC	(Z20,X)
L231F
		BCC	L231F		; ERROR, ->
L232F
		BVS	L232F		; ERROR, ->
L233F
		BNE	L233F		; ERROR, ->
L234F
		BMI	L234F		; ERROR, ->

		CMP	#0
L235F
		BNE	L235F		; ERROR, ->


		LDA	#$5B
		STA	POSTCODE

		LDX	#$30
		LDA	#$D0
		STA	(ZF0,X)

		CLC
		LDA	#$30
		ADC	(ZF0,X)
L231G
		BCC	L231G		; ERROR, ->
L232G
		BVS	L232G		; ERROR, ->
L233G
		BNE	L233G		; ERROR, ->
L234G
		BMI	L234G		; ERROR, ->

		CMP	#0
L235G
		BNE	L235G		; ERROR, ->


;  CLC 		; $30 + $50 = $80, RETURNS C = 0, RETURNS V = 1
;  LDA #$30
;  ADC #$50

		LDA	#$5C
		STA	POSTCODE

		LDA	#$50
		STA	Z10
		STA	A0400

		CLC
		LDA	#$30
		ADC	#$50
L241
		BCS	L241		; ERROR, ->
L242
		BVC	L242		; ERROR, ->
L243
		BEQ	L243		; ERROR, ->
L244
		BPL	L244		; ERROR, ->

		CMP	#$80
L245
		BNE	L245		; ERROR, ->


		LDA	#$5D
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	Z10
L241A
		BCS	L241A		; ERROR, ->
L242A
		BVC	L242A		; ERROR, ->
L243A
		BEQ	L243A		; ERROR, ->
L244A
		BPL	L244A		; ERROR, ->

		CMP	#$80
L245A
		BNE	L245A		; ERROR, ->


		LDA	#$5E
		STA	POSTCODE

		CLC
		LDA	#$30
		ADC	A0400
L241B
		BCS	L241B		; ERROR, ->
L242B
		BVC	L242B		; ERROR, ->
L243B
		BEQ	L243B		; ERROR, ->
L244B
		BPL	L244B		; ERROR, ->

		CMP	#$80
L245B
		BNE	L245B		; ERROR, ->


		LDA	#$5F
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	Z30,X

		CLC
		LDA	#$30
		ADC	Z30,X
L241C
		BCS	L241C		; ERROR, ->
L242C
		BVC	L242C		; ERROR, ->
L243C
		BEQ	L243C		; ERROR, ->
L244C
		BPL	L244C		; ERROR, ->

		CMP	#$80
L245C
		BNE	L245C		; ERROR, ->


		LDA	#$60
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	A0400,X

		CLC
		LDA	#$30
		ADC	A0400,X
L241D
		BCS	L241D		; ERROR, ->
L242D
		BVC	L242D		; ERROR, ->
L243D
		BEQ	L243D		; ERROR, ->
L244D
		BPL	L244D		; ERROR, ->

		CMP	#$80
L245D
		BNE	L245D		; ERROR, ->


		LDA	#$61
		STA	POSTCODE

		LDY	#$30
		LDA	#$50
		STA	A0400,Y

		CLC
		LDA	#$30
		ADC	A0400,Y
L241E
		BCS	L241E		; ERROR, ->
L242E
		BVC	L242E		; ERROR, ->
L243E
		BEQ	L243E		; ERROR, ->
L244E
		BPL	L244E		; ERROR, ->

		CMP	#$80
L245E
		BNE	L245E		; ERROR, ->


		LDA	#$62
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$50
		STA	(Z20,X)

		CLC
		LDA	#$30
		ADC	(Z20,X)
L241F
		BCS	L241F		; ERROR, ->
L242F
		BVC	L242F		; ERROR, ->
L243F
		BEQ	L243F		; ERROR, ->
L244F
		BPL	L244F		; ERROR, ->

		CMP	#$80
L245F
		BNE	L245F		; ERROR, ->


		LDA	#$63
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	(ZF0,X)

		CLC
		LDA	#$30
		ADC	(ZF0,X)
L241G
		BCS	L241G		; ERROR, ->
L242G
		BVC	L242G		; ERROR, ->
L243G
		BEQ	L243G		; ERROR, ->
L244G
		BPL	L244G		; ERROR, ->

		CMP	#$80
L245G
		BNE	L245G		; ERROR, ->


;  CLC 		; $80 + $FF = $7F, RETURNS C = 1, RETURNS V = 1
;  LDA #$80
;  ADC #$FF

		LDA	#$64
		STA	POSTCODE

		LDA	#$FF
		STA	Z10
		STA	A0400

		CLC
		LDA	#$80
		ADC	#$FF
L251
		BCC	L251		; ERROR, ->
L252
		BVC	L252		; ERROR, ->
L253
		BEQ	L253		; ERROR, ->
L254
		BMI	L254		; ERROR, ->

		CMP	#$7F
L255
		BNE	L255		; ERROR, ->


		LDA	#$65
		STA	POSTCODE

		CLC
		LDA	#$80
		ADC	Z10
L251A
		BCC	L251A		; ERROR, ->
L252A
		BVC	L252A		; ERROR, ->
L253A
		BEQ	L253A		; ERROR, ->
L254A
		BMI	L254A		; ERROR, ->

		CMP	#$7F
L255A
		BNE	L255A		; ERROR, ->


		LDA	#$66
		STA	POSTCODE

		CLC
		LDA	#$80
		ADC	A0400
L251B
		BCC	L251B		; ERROR, ->
L252B
		BVC	L252B		; ERROR, ->
L253B
		BEQ	L253B		; ERROR, ->
L254B
		BMI	L254B		; ERROR, ->

		CMP	#$7F
L255B
		BNE	L255B		; ERROR, ->


		LDA	#$67
		STA	POSTCODE

		LDX	#$80
		LDA	#$FF
		STA	Z30,X

		CLC
		LDA	#$80
		ADC	Z30,X
L251C
		BCC	L251C		; ERROR, ->
L252C
		BVC	L252C		; ERROR, ->
L253C
		BEQ	L253C		; ERROR, ->
L254C
		BMI	L254C		; ERROR, ->

		CMP	#$7F
L255C
		BNE	L255C		; ERROR, ->


		LDA	#$68
		STA	POSTCODE

		LDX	#$30
		LDA	#$FF
		STA	A0400,X

		CLC
		LDA	#$80
		ADC	A0400,X
L251D
		BCC	L251D		; ERROR, ->
L252D
		BVC	L252D		; ERROR, ->
L253D
		BEQ	L253D		; ERROR, ->
L254D
		BMI	L254D		; ERROR, ->

		CMP	#$7F
L255D
		BNE	L255D		; ERROR, ->


		LDA	#$69
		STA	POSTCODE

		LDY	#$80
		LDA	#$FF
		STA	A0400,Y

		CLC
		LDA	#$80
		ADC	A0400,Y
L251E
		BCC	L251E		; ERROR, ->
L252E
		BVC	L252E		; ERROR, ->
L253E
		BEQ	L253E		; ERROR, ->
L254E
		BMI	L254E		; ERROR, ->

		CMP	#$7F
L255E
		BNE	L255E		; ERROR, ->


		LDA	#$6A
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$FF
		STA	(Z20,X)

		CLC
		LDA	#$80
		ADC	(Z20,X)
L251F
		BCC	L251F		; ERROR, ->
L252F
		BVC	L252F		; ERROR, ->
L253F
		BEQ	L253F		; ERROR, ->
L254F
		BMI	L254F		; ERROR, ->

		CMP	#$7F
L255F
		BNE	L255F		; ERROR, ->


		LDA	#$6B
		STA	POSTCODE

		LDX	#$30
		LDA	#$FF
		STA	(ZF0,X)

		CLC
		LDA	#$80
		ADC	(ZF0,X)
L251G
		BCC	L251G		; ERROR, ->
L252G
		BVC	L252G		; ERROR, ->
L253G
		BEQ	L253G		; ERROR, ->
L254G
		BMI	L254G		; ERROR, ->

		CMP	#$7F
L255G
		BNE	L255G		; ERROR, ->


;**  SBC  (1)
;  SEC 		; $30 - $30 = $00, RETURNS C = 1, RETURNS V = 0
;  LDA #$30
;  SBC #$30

		LDA	#$6C
		STA	POSTCODE

		LDA	#$30
		STA	Z10
		STA	A0400

		SEC
		SBC	#$30
L261
		BCC	L261		; ERROR, ->
L262
		BVS	L262		; ERROR, ->
L263
		BNE	L263		; ERROR, ->
L264
		BMI	L264		; ERROR, ->

		CMP	#0
L265
		BNE	L265		; ERROR, ->


		LDA	#$6D
		STA	POSTCODE

		SEC
		LDA	#$30
		SBC	Z10
L261A
		BCC	L261A		; ERROR, ->
L262A
		BVS	L262A		; ERROR, ->
L263A
		BNE	L263A		; ERROR, ->
L264A
		BMI	L264A		; ERROR, ->

		CMP	#0
L265A
		BNE	L265A		; ERROR, ->


		LDA	#$6E
		STA	POSTCODE

		SEC
		LDA	#$30
		SBC	A0400
L261B
		BCC	L261B		; ERROR, ->
L262B
		BVS	L262B		; ERROR, ->
L263B
		BNE	L263B		; ERROR, ->
L264B
		BMI	L264B		; ERROR, ->

		CMP	#0
L265B
		BNE	L265B		; ERROR, ->


		LDA	#$6F
		STA	POSTCODE

		LDA	#$30
		TAX
		STA	Z30,X

		SEC
		SBC	Z30,X
L261C
		BCC	L261C		; ERROR, ->
L262C
		BVS	L262C		; ERROR, ->
L263C
		BNE	L263C		; ERROR, ->
L264C
		BMI	L264C		; ERROR, ->

		CMP	#0
L265C
		BNE	L265C		; ERROR, ->


		LDA	#$70
		STA	POSTCODE

		LDX	#$30
		LDA	#$30
		STA	A0400,X

		SEC
		SBC	A0400,X
L261D
		BCC	L261D		; ERROR, ->
L262D
		BVS	L262D		; ERROR, ->
L263D
		BNE	L263D		; ERROR, ->
L264D
		BMI	L264D		; ERROR, ->

		CMP	#0
L265D
		BNE	L265D		; ERROR, ->


		LDA	#$71
		STA	POSTCODE

		LDA	#$30
		TAY
		STA	A0400,Y

		SEC
		SBC	A0400,Y
L261E
		BCC	L261E		; ERROR, ->
L262E
		BVS	L262E		; ERROR, ->
L263E
		BNE	L263E		; ERROR, ->
L264E
		BMI	L264E		; ERROR, ->

		CMP	#0
L265E
		BNE	L265E		; ERROR, ->


		LDA	#$72
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		TXA
		STA	(Z20,X)

		SEC
		SBC	(Z20,X)
L261F
		BCC	L261F		; ERROR, ->
L262F
		BVS	L262F		; ERROR, ->
L263F
		BNE	L263F		; ERROR, ->
L264F
		BMI	L264F		; ERROR, ->

		CMP	#0
L265F
		BNE	L265F		; ERROR, ->


		LDA	#$73
		STA	POSTCODE

		LDA	#$30
		TAX
		STA	(ZF0,X)

		SEC
		SBC	(ZF0,X)
L261G
		BCC	L261G		; ERROR, ->
L262G
		BVS	L262G		; ERROR, ->
L263G
		BNE	L263G		; ERROR, ->
L264G
		BMI	L264G		; ERROR, ->

		CMP	#0
L265G
		BNE	L265G		; ERROR, ->


;  SEC 		; $30 - $50 = $20, RETURNS C = 0, RETURNS V = 0
;  LDA #$30
;  SBC #$50

		LDA	#$74
		STA	POSTCODE

		LDA	#$50
		STA	Z10
		STA	A0400

		SEC
		LDA	#$30
		SBC	#$50
L271
		BCS	L271		; ERROR, ->
L272
		BVS	L272		; ERROR, ->
L273
		BEQ	L273		; ERROR, ->
L274
		BPL	L274		; ERROR, ->

		CMP	#$E0
L275
		BNE	L275		; ERROR, ->


		LDA	#$75
		STA	POSTCODE

		SEC
		LDA	#$30
		SBC	Z10
L271A
		BCS	L271A		; ERROR, ->
L272A
		BVS	L272A		; ERROR, ->
L273A
		BEQ	L273A		; ERROR, ->
L274A
		BPL	L274A		; ERROR, ->

		CMP	#$E0
L275A
		BNE	L275A		; ERROR, ->


		LDA	#$76
		STA	POSTCODE

		SEC
		LDA	#$30
		SBC	A0400
L271B
		BCS	L271B		; ERROR, ->
L272B
		BVS	L272B		; ERROR, ->
L273B
		BEQ	L273B		; ERROR, ->
L274B
		BPL	L274B		; ERROR, ->

		CMP	#$E0
L275B
		BNE	L275B		; ERROR, ->


		LDA	#$77
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	Z30,X

		SEC
		LDA	#$30
		SBC	Z30,X
L271C
		BCS	L271C		; ERROR, ->
L272C
		BVS	L272C		; ERROR, ->
L273C
		BEQ	L273C		; ERROR, ->
L274C
		BPL	L274C		; ERROR, ->

		CMP	#$E0
L275C
		BNE	L275C		; ERROR, ->


		LDA	#$78
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	A0400,X

		SEC
		LDA	#$30
		SBC	A0400,X
L271D
		BCS	L271D		; ERROR, ->
L272D
		BVS	L272D		; ERROR, ->
L273D
		BEQ	L273D		; ERROR, ->
L274D
		BPL	L274D		; ERROR, ->

		CMP	#$E0
L275D
		BNE	L275D		; ERROR, ->


		LDA	#$79
		STA	POSTCODE

		LDY	#$30
		LDA	#$50
		STA	A0400,Y

		SEC
		LDA	#$30
		SBC	A0400,Y
L271E
		BCS	L271E		; ERROR, ->
L272E
		BVS	L272E		; ERROR, ->
L273E
		BEQ	L273E		; ERROR, ->
L274E
		BPL	L274E		; ERROR, ->

		CMP	#$E0
L275E
		BNE	L275E		; ERROR, ->


		LDA	#$7A
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$50
		STA	(Z20,X)

		SEC
		LDA	#$30
		SBC	(Z20,X)
L271F
		BCS	L271F		; ERROR, ->
L272F
		BVS	L272F		; ERROR, ->
L273F
		BEQ	L273F		; ERROR, ->
L274F
		BPL	L274F		; ERROR, ->

		CMP	#$E0
L275F
		BNE	L275F		; ERROR, ->


		LDA	#$7B
		STA	POSTCODE

		LDX	#$30
		LDA	#$50
		STA	(ZF0,X)

		SEC
		LDA	#$30
		SBC	(ZF0,X)
L271G
		BCS	L271G		; ERROR, ->
L272G
		BVS	L272G		; ERROR, ->
L273G
		BEQ	L273G		; ERROR, ->
L274G
		BPL	L274G		; ERROR, ->

		CMP	#$E0
L275G
		BNE	L275G		; ERROR, ->


;  SEC 		; $80 - $01 = $7F, RETURNS C = 1, RETURNS V = 1
;  LDA #$80
;  SBC #$01

		LDA	#$7C
		STA	POSTCODE

		LDA	#1
		STA	Z10
		STA	A0400

		SEC
		LDA	#$80
		SBC	#1
L281
		BCC	L281		; ERROR, ->
L282
		BVC	L282		; ERROR, ->
L283
		BEQ	L283		; ERROR, ->
L284
		BMI	L284		; ERROR, ->

		CMP	#$7F
L285
		BNE	L285		; ERROR, ->


		LDA	#$7D
		STA	POSTCODE

		SEC
		LDA	#$80
		SBC	Z10
L281A
		BCC	L281A		; ERROR, ->
L282A
		BVC	L282A		; ERROR, ->
L283A
		BEQ	L283A		; ERROR, ->
L284A
		BMI	L284A		; ERROR, ->

		CMP	#$7F
L285A
		BNE	L285A		; ERROR, ->


		LDA	#$7E
		STA	POSTCODE

		SEC
		LDA	#$80
		SBC	A0400
L281B
		BCC	L281B		; ERROR, ->
L282B
		BVC	L282B		; ERROR, ->
L283B
		BEQ	L283B		; ERROR, ->
L284B
		BMI	L284B		; ERROR, ->

		CMP	#$7F
L285B
		BNE	L285B		; ERROR, ->


		LDA	#$7F
		STA	POSTCODE

		LDX	#$30
		LDA	#1
		STA	Z30,X

		SEC
		LDA	#$80
		SBC	Z30,X
L281C
		BCC	L281C		; ERROR, ->
L282C
		BVC	L282C		; ERROR, ->
L283C
		BEQ	L283C		; ERROR, ->
L284C
		BMI	L284C		; ERROR, ->

		CMP	#$7F
L285C
		BNE	L285C		; ERROR, ->


		LDA	#$80
		STA	POSTCODE

		LDX	#$30
		LDA	#1
		STA	A0400,X

		SEC
		LDA	#$80
		SBC	A0400,X
L281D
		BCC	L281D		; ERROR, ->
L282D
		BVC	L282D		; ERROR, ->
L283D
		BEQ	L283D		; ERROR, ->
L284D
		BMI	L284D		; ERROR, ->

		CMP	#$7F
L285D
		BNE	L285D		; ERROR, ->


		LDA	#$81
		STA	POSTCODE

		LDY	#$30
		LDA	#1
		STA	A0400,Y

		SEC
		LDA	#$80
		SBC	A0400,Y
L281E
		BCC	L281E		; ERROR, ->
L282E
		BVC	L282E		; ERROR, ->
L283E
		BEQ	L283E		; ERROR, ->
L284E
		BMI	L284E		; ERROR, ->

		CMP	#$7F
L285E
		BNE	L285E		; ERROR, ->


		LDA	#$82
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#1
		STA	(Z20,X)

		SEC
		LDA	#$80
		SBC	(Z20,X)
L281F
		BCC	L281F		; ERROR, ->
L282F
		BVC	L282F		; ERROR, ->
L283F
		BEQ	L283F		; ERROR, ->
L284F
		BMI	L284F		; ERROR, ->

		CMP	#$7F
L285F
		BNE	L285F		; ERROR, ->


		LDA	#$83
		STA	POSTCODE

		LDX	#$30
		LDA	#1
		STA	(ZF0,X)

		SEC
		LDA	#$80
		SBC	(ZF0,X)
L281G
		BCC	L281G		; ERROR, ->
L282G
		BVC	L282G		; ERROR, ->
L283G
		BEQ	L283G		; ERROR, ->
L284G
		BMI	L284G		; ERROR, ->

		CMP	#$7F
L285G
		BNE	L285G		; ERROR, ->


;  SEC 		; $70 - $E0 = $90, RETURNS C = 0, RETURNS V = 1
;  LDA #$70
;  SBC #$E0

		LDA	#$84
		STA	POSTCODE

		LDA	#$E0
		STA	Z10
		STA	A0400

		SEC
		LDA	#$70
		SBC	#$E0
L291
		BCS	L291		; ERROR, ->
L292
		BVC	L292		; ERROR, ->
L293
		BEQ	L293		; ERROR, ->
L294
		BPL	L294		; ERROR, ->

		CMP	#$90
L295
		BNE	L295		; ERROR, ->


		LDA	#$85
		STA	POSTCODE

		SEC
		LDA	#$70
		SBC	Z10
L291A
		BCS	L291A		; ERROR, ->
L292A
		BVC	L292A		; ERROR, ->
L293A
		BEQ	L293A		; ERROR, ->
L294A
		BPL	L294A		; ERROR, ->

		CMP	#$90
L295A
		BNE	L295A		; ERROR, ->


		LDA	#$86
		STA	POSTCODE

		SEC
		LDA	#$70
		SBC	A0400
L291B
		BCS	L291B		; ERROR, ->
L292B
		BVC	L292B		; ERROR, ->
L293B
		BEQ	L293B		; ERROR, ->
L294B
		BPL	L294B		; ERROR, ->

		CMP	#$90
L295B
		BNE	L295B		; ERROR, ->


		LDA	#$87
		STA	POSTCODE

		LDX	#$70
		LDA	#$E0
		STA	Z30,X

		SEC
		LDA	#$70
		SBC	Z30,X
L291C
		BCS	L291C		; ERROR, ->
L292C
		BVC	L292C		; ERROR, ->
L293C
		BEQ	L293C		; ERROR, ->
L294C
		BPL	L294C		; ERROR, ->

		CMP	#$90
L295C
		BNE	L295C		; ERROR, ->


		LDA	#$88
		STA	POSTCODE

		LDX	#$30
		LDA	#$E0
		STA	A0400,X

		SEC
		LDA	#$70
		SBC	A0400,X
L291D
		BCS	L291D		; ERROR, ->
L292D
		BVC	L292D		; ERROR, ->
L293D
		BEQ	L293D		; ERROR, ->
L294D
		BPL	L294D		; ERROR, ->

		CMP	#$90
L295D
		BNE	L295D		; ERROR, ->


		LDA	#$89
		STA	POSTCODE

		LDY	#$70
		LDA	#$E0
		STA	A0400,Y

		SEC
		LDA	#$70
		SBC	A0400,Y
L291E
		BCS	L291E		; ERROR, ->
L292E
		BVC	L292E		; ERROR, ->
L293E
		BEQ	L293E		; ERROR, ->
L294E
		BPL	L294E		; ERROR, ->

		CMP	#$90
L295E
		BNE	L295E		; ERROR, ->


		LDA	#$8A
		STA	POSTCODE

		LDA	#>(A04AA)
		STA	Z50+1
		STA	Z20+1

		LDA	#<(A04AA)
		STA	Z50
		STA	Z20

		LDX	#$30
		LDA	#$E0
		STA	(Z20,X)

		SEC
		LDA	#$70
		SBC	(Z20,X)
L291F
		BCS	L291F		; ERROR, ->
L292F
		BVC	L292F		; ERROR, ->
L293F
		BEQ	L293F		; ERROR, ->
L294F
		BPL	L294F		; ERROR, ->

		CMP	#$90
L295F
		BNE	L295F		; ERROR, ->


		LDA	#$8B
		STA	POSTCODE

		LDX	#$30
		LDA	#$E0
		STA	(ZF0,X)

		SEC
		LDA	#$70
		SBC	(ZF0,X)
L291G
		BCS	L291G		; ERROR, ->
L292G
		BVC	L292G		; ERROR, ->
L293G
		BEQ	L293G		; ERROR, ->
L294G
		BPL	L294G		; ERROR, ->

		CMP	#$90
L295G
		BNE	L295G		; ERROR, ->


;**  ADC  (2)             	TEST ADC IN COMBINATION WITH SEC
		LDA	#$8C
		STA	POSTCODE

		SEC
		LDA	#1
		ADC	#4
L301
		BCS	L301		; CARRY MUST HAVE BEEN CLEARED

		CMP	#6
L302
		BNE	L302


		LDA	#$8D
		STA	POSTCODE

		SEC
		LDA	#$7F
		ADC	#$80
L303
		BNE	L303
L304
		BCC	L302		; CARRY STILL MUST BE SET


;**  SBC  (2)             	TEST SBC IN COMBINATION WITH CLC
		LDA	#$8E
		STA	POSTCODE

		CLC
		LDA	#6
		SBC	#4
L311
		BCC	L311		; CARRY MUST HAVE BEEN SET

		CMP	#1
L312
		BNE	L312


		LDA	#$8F
		STA	POSTCODE

		SEC
		LDA	#$7F
		ADC	#$7F
L313
		BCS	L313		; CARRY STILL MUST BE CLEARED

		CMP	#$FF
L314
		BNE	L314


		LDA	#$9F
		STA	POSTCODE

		SEC
		LDA	#$7F
		ADC	#$80
L315
		BCC	L313		; CARRY STILL MUST BE SET
L316
		BNE	L316


;**  AND
		LDA	#$A0
		STA	POSTCODE


		LDA	#>(A0400)
		STA	Z10+6
		STA	Z10+4
		
		LDA	#$10
		STA	Z10+5

		LDA	#0
		STA	Z10+3
		STA	A0400+$10
		STA	A0400+9
		  
		LDA	#$AA
		LDX	#5
		STA	(Z10,X)		; = ($15) = $0410

		LDY	#9
		STA	(Z10+3),Y		; = $0400 + 9

		CMP	A0400+$10
L320A
		BNE	L320A

		CMP	A0400+9

L320B		BNE	L320B


;* A = $FF, MEMORY = 0
		LDA	#$A1
		STA	POSTCODE

		LDX	#5
		LDA	#0
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	A0400,Y
		STA	(Z10,X)

		LDY	#5
		STA	(Z10+4),Y

		LDA	#$FF
		AND	#$0
L321
		BNE	L321		; ERROR, ->
L322
		BMI	L322		; ERROR, ->

		LDA	#$A2
		STA	POSTCODE

		LDA	#$FF
		AND	Z10
L331
		BNE	L331		; ERROR, ->
L332
		BMI	L332		; ERROR, ->


		LDA	#$A3
		STA	POSTCODE

		LDA	#$FF
		AND	A0400
L341
		BNE	L341		; ERROR, ->
L342
		BMI	L342		; ERROR, ->


		LDA	#$A4
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	Z10,X
L351
		BNE	L351		; ERROR, ->
L352
		BMI	L352		; ERROR, ->


		LDA	#$A5
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	A0400,X
L361
		BNE	L361		; ERROR, ->
L362
		BMI	L362		; ERROR, ->


		LDA	#$A6
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		AND	A0400,Y
L371
		BNE	L371		; ERROR, ->
L372
		BMI	L372		; ERROR, ->


		LDA	#$A7
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	(Z10,X)
L381
		BNE	L381		; ERROR, ->
L382
		BMI	L382		; ERROR, ->


		LDA	#$A8
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		AND	(Z10+4),Y
L391
		BNE	L391		; ERROR, ->
L392
		BMI	L392		; ERROR, ->


;* A = 0, MEMORY = $FF XXX
		LDA	#$A9
		STA	POSTCODE

		LDX	#5
		LDA	#$1C
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	A0400,Y
		STA	(Z10,X)

		LDY	#5
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#0
		AND	#$FF
L421
		BNE	L421		; ERROR, ->
L422
		BMI	L422		; ERROR, ->


		LDA	#$AA
		STA	POSTCODE

		LDA	#0
		AND	Z10
L431
		BNE	L431		; ERROR, ->
L432
		BMI	L432		; ERROR, ->


		LDA	#$AB
		STA	POSTCODE

		LDA	#0
		AND	A0400
L441
		BNE	L441		; ERROR, ->
L442
		BMI	L442		; ERROR, ->


		LDA	#$AC
		STA	POSTCODE

		LDX	#5
		LDA	#0
		AND	Z10,X
L451
		BNE	L451		; ERROR, ->
L452
		BMI	L452		; ERROR, ->


		LDA	#$AD
		STA	POSTCODE

		LDX	#5
		LDA	#0
		AND	A0400,X
L461
		BNE	L461		; ERROR, ->
L462
		BMI	L462		; ERROR, ->


		LDA	#$AE
		STA	POSTCODE

		LDY	#5
		LDA	#0
		AND	A0400,Y
L471
		BNE	L471		; ERROR, ->
L472
		BMI	L472		; ERROR, ->


		LDA	#$AF
		STA	POSTCODE

		LDX	#5
		LDA	#0
		AND	(Z10,X)
L481
		BNE	L481		; ERROR, ->
L482
		BMI	L482		; ERROR, ->


		LDA	#$B0
		STA	POSTCODE

		LDY	#5
		LDA	#0
		AND	(Z10+4),Y
L491
		BNE	L491		; ERROR, ->
L492
		BMI	L492		; ERROR, ->


;* A = $AA, MEMORY = $55
		LDA	#$B1
		STA	POSTCODE

		LDX	#5
		LDA	#$55
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#5
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#$AA
		AND	#$55
L521
		BNE	L521		; ERROR, ->
L522
		BMI	L522		; ERROR, ->


		LDA	#$B2
		STA	POSTCODE

		LDA	#$AA
		AND	Z10
L531
		BNE	L531		; ERROR, ->
L532
		BMI	L532		; ERROR, ->


		LDA	#$B3
		STA	POSTCODE

		LDA	#$AA
		AND	A0400
L541
		BNE	L541		; ERROR, ->
L542
		BMI	L542		; ERROR, ->


		LDA	#$B4
		STA	POSTCODE

		LDX	#5
		LDA	#$AA
		AND	Z10,X
L551
		BNE	L551		; ERROR, ->
L552
		BMI	L552		; ERROR, ->


		LDA	#$B5
		STA	POSTCODE

		LDX	#5
		LDA	#$AA
		AND	A0400,X
L561
		BNE	L561		; ERROR, ->
L562
		BMI	L562		; ERROR, ->


		LDA	#$B6
		STA	POSTCODE

		LDY	#5
		LDA	#$AA
		AND	A0400,Y
L571
		BNE	L571		; ERROR, ->
L572
		BMI	L572		; ERROR, ->


		LDA	#$B7
		STA	POSTCODE

		LDX	#5
		LDA	#$AA
		AND	(Z10,X)
L581
		BNE	L581		; ERROR, ->
L582
		BMI	L582		; ERROR, ->


		LDA	#$B8
		STA	POSTCODE

		LDY	#5
		LDA	#$AA
		AND	(Z10+4),Y
L591
		BNE	L591		; ERROR, ->
L592
		BMI	L592		; ERROR, ->


;* A = $FF, MEMORY = $FF
		LDA	#$B9
		STA	POSTCODE
;
;		LDX	#5
;		LDA	#$FF
;		STA	Z10
;		STA	A0400
;		STA	Z10,X
;		STA	A0400,X
;		STA	(Z10,X)
;
;		LDY	#5
;		STA	A0400,Y
;		STA	(Z10+4),Y
;
;		LDA	#$FF
;		AND	#$FF
L622
;		BPL	L622		; ERROR, ->
;
;		CMP	#$FF
L621
;		BNE	L621		; ERROR, ->


		LDA	#$BA
		STA	POSTCODE

		LDA	#$FF
		AND	Z10
L632
		BPL	L632		; ERROR, ->

		CMP	#$FF
L631
		BNE	L631		; ERROR, ->


		LDA	#$BB
		STA	POSTCODE

		LDA	#$FF
		AND	A0400
L642
		BPL	L642		; ERROR, ->

		CMP	#$FF
L641
		BNE	L641		; ERROR, ->


		LDA	#$BC
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	Z10,X
L652
		BPL	L652		; ERROR, ->

		CMP	#$FF
L651
		BNE	L651		; ERROR, ->


		LDA	#$BD
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	A0400,X
L662
		BPL	L662		; ERROR, ->

		CMP	#$FF
L661
		BNE	L661		; ERROR, ->


		LDA	#$BE
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		AND	A0400,Y
L672
		BPL	L672		; ERROR, ->

		CMP	#$FF
L671
		BNE	L671		; ERROR, ->


		LDA	#$BF
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		AND	(Z10,X)
L682
		BPL	L682		; ERROR, ->

		CMP	#$FF
L681
		BNE	L681		; ERROR, ->


		LDA	#$C0
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		AND	(Z10+4),Y
L692
		BPL	L692		; ERROR, ->

		CMP	#$FF
L691
		BNE	L691		; ERROR, ->


;**  ORA
;* A = $FF, MEMORY = 0
		LDA	#$C1
		STA	POSTCODE

		LDX	#5
		LDA	#0
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#5
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#$FF
		ORA	#0
L722
		BPL	L722		; ERROR, ->

		CMP	#$FF
L721
		BNE	L721		; ERROR, ->


		LDA	#$C2
		STA	POSTCODE

		LDA	#$FF
		ORA	Z10
L732
		BPL	L732		; ERROR, ->

		CMP	#$FF
L731
		BNE	L731		; ERROR, ->


		LDA	#$C3
		STA	POSTCODE

		LDA	#$FF
		ORA	A0400
L742
		BPL	L742		; ERROR, ->

		CMP	#$FF
L741
		BNE	L741		; ERROR, ->


		LDA	#$C4
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		ORA	Z10,X
L752
		BPL	L752		; ERROR, ->

		CMP	#$FF
L751
		BNE	L751		; ERROR, ->


		LDA	#$C5
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		ORA	A0400,X
L762
		BPL	L762		; ERROR, ->

		CMP	#$FF
L761
		BNE	L761		; ERROR, ->


		LDA	#$C6
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		ORA	A0400,Y
L772
		BPL	L772		; ERROR, ->

		CMP	#$FF
L771
		BNE	L771		; ERROR, ->


		LDA	#$C7
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		ORA	(Z10,X)
L782
		BPL	L782		; ERROR, ->

		CMP	#$FF
L781
		BNE	L781		; ERROR, ->


		LDA	#$C8
		STA	POSTCODE

		LDY	#5
		LDA	#$FF
		ORA	(Z10+4),Y
L792
		BPL	L792		; ERROR, ->

		CMP	#$FF
L791
		BNE	L791		; ERROR, ->


;* A = 0, MEMORY = $FF
		LDA	#$C9
		STA	POSTCODE

		LDX	#5
		LDA	#$FF
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#5
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#0
		ORA	#$FF
L822
		BPL	L822		; ERROR, ->

		CMP	#$FF
L821
		BNE	L821		; ERROR, ->


		LDA	#$CA
		STA	POSTCODE

		LDA	#0
		ORA	Z10
L832
		BPL	L832		; ERROR, ->

		CMP	#$FF
L831
		BNE	L831		; ERROR, ->


		LDA	#$CB
		STA	POSTCODE

		LDA	#0
		ORA	A0400
L842
		BPL	L842		; ERROR, ->

		CMP	#$FF
L841
		BNE	L841		; ERROR, ->


		LDA	#$CC
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	Z10,X
L852
		BPL	L852		; ERROR, ->

		CMP	#$FF
L851
		BNE	L851		; ERROR, ->


		LDA	#$CD
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	A0400,X
L862
		BPL	L862		; ERROR, ->

		CMP	#$FF
L861
		BNE	L861		; ERROR, ->


		LDA	#$CE
		STA	POSTCODE

		LDY	#5
		LDA	#0
		ORA	A0400,Y
L872
		BPL	L872		; ERROR, ->

		CMP	#$FF
L871
		BNE	L871		; ERROR, ->


		LDA	#$CF
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	(Z10,X)
L882
		BPL	L882		; ERROR, ->

		CMP	#$FF
L881
		BNE	L881		; ERROR, ->


		LDA	#$D0
		STA	POSTCODE

		LDY	#5
		LDA	#0
		ORA	(Z10+4),Y
L892
		BPL	L892		; ERROR, ->

		CMP	#$FF
L891
		BNE	L891		; ERROR, ->


;* A = 0, MEMORY = 0
		LDA	#$D1
		STA	POSTCODE

		LDX	#5
		LDA	#0
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#5
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#0
		ORA	#0
L922
		BMI	L922		; ERROR, ->
L921
		BNE	L921		; ERROR, ->


		LDA	#$CA
		STA	POSTCODE

		LDA	#0
		ORA	Z10
L932
		BMI	L932		; ERROR, ->
L931
		BNE	L931		; ERROR, ->


		LDA	#$CB
		STA	POSTCODE

		LDA	#0
		ORA	A0400
L942
		BMI	L942		; ERROR, ->
L941
		BNE	L941		; ERROR, ->


		LDA	#$CC
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	Z10,X
L952
		BMI	L952		; ERROR, ->
L951
		BNE	L951		; ERROR, ->


		LDA	#$CD
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	A0400,X
L962
		BMI	L962		; ERROR, ->
L961
		BNE	L961		; ERROR, ->


		LDA	#$CE
		STA	POSTCODE

		LDY	#5
		LDA	#0
		ORA	A0400,Y
L972
		BMI	L972		; ERROR, ->
L971
		BNE	L971		; ERROR, ->


		LDA	#$CF
		STA	POSTCODE

		LDX	#5
		LDA	#0
		ORA	(Z10,X)
L982
		BMI	L982		; ERROR, ->
L981
		BNE	L981		; ERROR, ->


		LDA	#$D0
		STA	POSTCODE

		LDY	#5
		LDA	#0
		ORA	(Z10+4),Y
L992
		BMI	L992		; ERROR, ->
L991
		BNE	L991		; ERROR, ->


;**  ASL
;* ASL A
		LDA	#$D1
		STA	POSTCODE

		LDA	#1
		SEC
		ASL
M001
		BCS	M001
M002
		BMI	M003

		CMP	#2
M003
		BNE	M003


		SEC
		ASL
M004
		BCS	M004
M005
		BMI	M005

		CMP	#4
M006
		BNE	M006


		SEC
		ASL
M007
		BCS	M007
M008
		BMI	M008

		CMP	#8
M009
		BNE	M009


		SEC
		ASL
M010
		BCS	M010
M011
		BMI	M011

		CMP	#$10
M012
		BNE	M012


		SEC
		ASL
M013
		BCS	M013
M014
		BMI	M014

		CMP	#$20
M015
		BNE	M015


		SEC
		ASL
M016
		BCS	M016
M017
		BMI	M017

		CMP	#$40
M018
		BNE	M018


		SEC
		ASL
M019
		BCS	M019
M020
		BPL	M020

		CMP	#$80
M021
		BNE	M021

		ASL
M022
		BCC	M022
M023
		BMI	M023
M024
		BNE	M024


;* REST OF POSSIBLE ASL OPCODES. ONLY READ/WRITE HAS TO BE TESTED BECAUSE
;   THE SHIFTING ITSELF DOESN'T HAVE TO BE TESTED ANYMORE.  
		LDA	#$D2
		STA	POSTCODE

		LDX	#$30
		LDA	#$55
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X

		ASL	Z10
		LDA	Z10
		CMP	#$AA
M025		
		BNE	M025


		LDA	#$D3
		STA	POSTCODE

		ASL	A0400
		LDA	A0400
		CMP	#$AA
M026		
		BNE	M026


		LDA	#$D4
		STA	POSTCODE

		LDX	#$30
		ASL	Z10,X
		LDA	Z10,X
		CMP	#$AA
M027		
		BNE	M027


		LDA	#$D5
		STA	POSTCODE

		LDX	#$30
		ASL	A0400,X
		LDA	A0400,X
		CMP	#$AA
M028		
		BNE	M028


;**  LSR
		LDA	#$D6
		STA	POSTCODE

		LDA	#$80
		SEC
		LSR
M031
		BCS	M031
M032
		BMI	M032

		CMP	#$40
M033
		BNE	M033


		SEC
		LSR
M034
		BCS	M034
M035
		BMI	M035

		CMP	#$20
M036
		BNE	M036


		SEC
		LSR
M037
		BCS	M037
M038
		BMI	M038

		CMP	#$10
M039
		BNE	M039


		SEC
		LSR
M041
		BCS	M041
M042
		BMI	M043

		CMP	#8
M043
		BNE	M043


		SEC
		LSR
M044
		BCS	M044
M045
		BMI	M045

		CMP	#4
M046
		BNE	M046


		SEC
		LSR
M047
		BCS	M047
M048
		BMI	M048

		CMP	#2
M049
		BNE	M049


		SEC
		LSR
M051
		BCS	M051
M052
		BMI	M053

		CMP	#1
M053
		BNE	M053


		LSR
M054
		BCC	M054
M055
		BMI	M055
M056
		BNE	M056


;* REST OF POSSIBLE LSR OPCODES. ONLY READ/WRITE HAS TO BE TESTED BECAUSE
;   THE SHIFTING ITSELF DOESN'T HAVE TO BE TESTED ANYMORE.  
		LDX	#$30
		LDA	#$AA
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X

		LDA	#$D7
		STA	POSTCODE

		LSR	Z10
		LDA	Z10
		CMP	#$55
M057		
		BNE	M057


		LDA	#$D8
		STA	POSTCODE

		LSR	A0400
		LDA	A0400
		CMP	#$55
M058		
		BNE	M058


		LDA	#$D9
		STA	POSTCODE

		LDX	#$30
		LSR	Z10,X
		LDA	Z10,X
		CMP	#$55
M059		
		BNE	M059


		LDA	#$DA
		STA	POSTCODE

		LDX	#$30
		LSR	A0400,X
		LDA	A0400,X
		CMP	#$55
M060		
		BNE	M060


;**  ROL
		LDA	#$D8
		STA	POSTCODE

		LDA	#$11
		CLC
		ROL
M071
		BCS	M071
M072
		BMI	M072
		
		CMP	#$22
M073
		BNE	M073
		

		SEC
		ROL
M074
		BCS	M074
M075
		BMI	M075
		
		CMP	#$45
M076
		BNE	M076
		

		CLC
		ROL
M077
		BCS	M077
M078
		BPL	M078
		
		CMP	#$8A
M079
		BNE	M079
		

		CLC
		ROL
M081
		BCC	M081
M082
		BMI	M082
		
		CMP	#Z10+4
M083
		BNE	M083
		

;* REST OF POSSIBLE ROL OPCODES. ONLY READ/WRITE HAS TO BE TESTED BECAUSE
;   THE SHIFTING ITSELF DOESN'T HAVE TO BE TESTED ANYMORE.  
		LDX	#$30
		LDA	#$55
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X


		LDA	#$D9
		STA	POSTCODE

		SEC
		ROL	Z10
		LDA	Z10
		CMP	#$AB
M085		
		BNE	M085


		LDA	#$DA
		STA	POSTCODE

		SEC
		ROL	A0400
		LDA	A0400
		CMP	#$AB
M086		
		BNE	M086


		LDA	#$DB
		STA	POSTCODE

		LDX	#$30
		SEC
		ROL	Z10,X
		LDA	Z10,X
		CMP	#$AB
M087		
		BNE	M087


		LDA	#$DC
		STA	POSTCODE

		SEC
		ROL	A0400,X
		LDA	A0400,X
		CMP	#$AB
M088		
		BNE	M088


;**  ROR
		LDA	#$DD
		STA	POSTCODE

		LDA	#$88
		CLC
		ROR
M091
		BCS	M091
M092
		BMI	M092
		
		CMP	#$44
M093
		BNE	M093
		

		SEC
		ROR
M094
		BCS	M094
M095
		BPL	M095
		
		CMP	#$A2
M096
		BNE	M096
		

		CLC
		ROR
M097
		BCS	M097
M098
		BMI	M098
		
		CMP	#$51
M099
		BNE	M099
		

		CLC
		ROR
M101
		BCC	M101
M102
		BMI	M102
		
		CMP	#$28
M103
		BNE	M103
		

;* REST OF POSSIBLE ROR OPCODES. ONLY READ/WRITE HAS TO BE TESTED BECAUSE
;   THE SHIFTING ITSELF DOESN'T HAVE TO BE TESTED ANYMORE.  
		LDX	#$30
		LDA	#$AA
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X


		LDA	#$DE
		STA	POSTCODE

		SEC
		ROR	Z10
		LDA	Z10
		CMP	#$D5
M105		
		BNE	M105


		LDA	#$DF
		STA	POSTCODE

		SEC
		ROR	A0400
		LDA	A0400
		CMP	#$D5
M106		
		BNE	M106


		LDA	#$E0
		STA	POSTCODE

		LDX	#$30
		SEC
		ROR	Z10,X
		LDA	Z10,X
		CMP	#$D5
M107		
		BNE	M107


		LDA	#$E1
		STA	POSTCODE

		LDX	#$30
		SEC
		ROR	A0400,X
		LDA	A0400,X
		CMP	#$D5
M108		
		BNE	M108


;**  BIT
		LDA	#$E1
		STA	POSTCODE

;* A = $FF, MEMORY = 0
		LDA	#0
		STA	Z10
		STA	A0400

		LDA	#$FF
		BIT	Z10
M111
		BNE	M111		; ERROR, ->
M112
		BMI	M112		; ERROR, ->
M113
		BVS	M113		; ERROR, ->


		LDA	#$E2
		STA	POSTCODE

		LDA	#$FF
		BIT	A0400
M121
		BNE	M121		; ERROR, ->
M122
		BMI	M122		; ERROR, ->
M123
		BVS	M123		; ERROR, ->


;* A = 0, MEMORY = $FF
		LDA	#$E3
		STA	POSTCODE

		LDA	#$FF
		STA	Z10
		STA	A0400

		LDA	#0
		BIT	Z10
M131
		BNE	M131		; ERROR, ->
M132
		BPL	M132		; ERROR, ->
M133
		BVC	M133		; ERROR, ->


		LDA	#$E4
		STA	POSTCODE

		LDA	#0
		BIT	A0400
M141
		BNE	M141		; ERROR, ->
M142
		BPL	M142		; ERROR, ->
M143
		BVC	M143		; ERROR, ->


;* A = $54, MEMORY = $55
		LDA	#$E5
		STA	POSTCODE

		LDA	#$55
		STA	Z10
		STA	A0400

		LDA	#$54
		BIT	Z10
M151
		BEQ	M151		; ERROR, ->
M152
		BMI	M152		; ERROR, ->
M153
		BVC	M153		; ERROR, ->


		LDA	#$E6
		STA	POSTCODE

		LDA	#$54
		BIT	A0400
M161
		BEQ	M161		; ERROR, ->
M162
		BMI	M162		; ERROR, ->
M163
		BVC	M163		; ERROR, ->


;**  DEC
;   ONLY READ/WRITE HAS TO BE TESTED BECAUSE THE DECREMENT ITSELF
;   DOESN'T HAVE TO BE TESTED ANYMORE; DONE WITH DEX AND DEY. 
		LDA	#$E7
		STA	POSTCODE

		LDX	#$30
		LDA	#$AA
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X

		DEC	Z10
		LDA	Z10
		CMP	#$A9
M171
		BNE	M171
		
		DEC	A0400
		LDA	A0400
		CMP	#$A9
M172
		BNE	M172
		
		DEC	Z10,X
		LDA	Z10,X
		CMP	#$A9
M173
		BNE	M173
		
		DEC	A0400,X
		LDA	A0400,X
		CMP	#$A9
M174
		BNE	M174
		

;**  DEC
;   ONLY READ/WRITE HAS TO BE TESTED BECAUSE THE DECREMENT ITSELF
;   DOESN'T HAVE TO BE TESTED ANYMORE; DONE WITH DEX AND DEY. 
		LDA	#$E7
		STA	POSTCODE

		INC	Z10
		LDA	Z10
		CMP	#$AA
M181
		BNE	M181
		
		INC	A0400
		LDA	A0400
		CMP	#$AA
M182
		BNE	M182
		
		INC	Z10,X
		LDA	Z10,X
		CMP	#$AA
M183
		BNE	M183
		
		INC	A0400,X
		LDA	A0400,X
		CMP	#$AA
M184
		BNE	M184
		
		
;**  EOR
;* A = $AA, MEMORY = $55
		LDA	#$E8
		STA	POSTCODE

		LDX	#$30
		LDA	#$55
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#$30
		STA	A0400,Y
		STA	(Z10+4),Y


		LDA	#$AA
		EOR	#$55
M191
		BEQ	M191		; ERROR, ->
M192
		BPL	M192		; ERROR, ->
		
		CMP	#$FF
M193
		BNE	M193


		LDA	#$E9
		STA	POSTCODE

		LDA	#$AA
		EOR	Z10
M201
		BEQ	M201		; ERROR, ->
M202
		BPL	M202		; ERROR, ->

		CMP	#$FF
M203
		BNE	M203


		LDA	#$EA
		STA	POSTCODE

		LDA	#$AA
		EOR	A0400
M211
		BEQ	M211		; ERROR, ->
M212
		BPL	M212		; ERROR, ->

		CMP	#$FF
M213
		BNE	M213


		LDA	#$EB
		STA	POSTCODE

		LDA	#$AA
		EOR	Z10,X
M221
		BEQ	M221		; ERROR, ->
M222
		BPL	M222		; ERROR, ->

		CMP	#$FF
M223
		BNE	M223


		LDA	#$EC
		STA	POSTCODE

		LDX	#$30
		LDA	#$AA
		EOR	A0400,X
M231
		BEQ	M231		; ERROR, ->
M232
		BPL	M232		; ERROR, ->

		CMP	#$FF
M233
		BNE	M233


		LDA	#$ED
		STA	POSTCODE

		LDY	#$30
		LDA	#$AA
		EOR	A0400,Y
M241
		BEQ	M241		; ERROR, ->
M242
		BPL	M242		; ERROR, ->

		CMP	#$FF
M243
		BNE	M243


		LDA	#$EE
		STA	POSTCODE

		LDA	#$AA
		EOR	(Z10,X)
M251
		BEQ	M251		; ERROR, ->
M252
		BPL	M252		; ERROR, ->

		CMP	#$FF
M253
		BNE	M253


		LDA	#$EF
		STA	POSTCODE

		LDY	#$30
		LDA	#$AA
		EOR	(Z10+4),Y
M261
		BEQ	M261		; ERROR, ->
M262
		BPL	M262		; ERROR, ->

		CMP	#$FF
M263
		BNE	M263


;* A = $CC, MEMORY = $CC
		LDA	#$F0
		STA	POSTCODE

		LDX	#$30
		LDA	#$CC
		STA	Z10
		STA	A0400
		STA	Z10,X
		STA	A0400,X
		STA	(Z10,X)

		LDY	#$30
		STA	A0400,Y
		STA	(Z10+4),Y

		LDA	#$CC
		EOR	#$CC
M291
		BNE	M291		; ERROR, ->
M292
		BMI	M292		; ERROR, ->
		

		LDA	#$F1
		STA	POSTCODE

		LDA	#$CC
		EOR	Z10
M301
		BNE	M301		; ERROR, ->
M302
		BMI	M302		; ERROR, ->


		LDA	#$F2
		STA	POSTCODE

		LDA	#$CC
		EOR	A0400
M311
		BNE	M311		; ERROR, ->
M312
		BMI	M312		; ERROR, ->


		LDA	#$F3
		STA	POSTCODE

		LDX	#$30
		LDA	#$CC
		EOR	Z10,X
M321
		BNE	M321		; ERROR, ->
M322
		BMI	M322		; ERROR, ->


		LDA	#$F4
		STA	POSTCODE

		LDX	#$30
		LDA	#$CC
		EOR	A0400,X
M331
		BNE	M331		; ERROR, ->
M332
		BMI	M332		; ERROR, ->


		LDA	#$F5
		STA	POSTCODE

		LDY	#$30
		LDA	#$CC
		EOR	A0400,Y
M341
		BNE	M341		; ERROR, ->
M342
		BMI	M342		; ERROR, ->


		LDA	#$F6
		STA	POSTCODE

		LDX	#$30
		LDA	#$CC
		EOR	(Z10,X)
M351
		BNE	M351		; ERROR, ->
M352
		BMI	M352		; ERROR, ->


		LDA	#$F7
		STA	POSTCODE

		LDY	#$30
		LDA	#$CC
		EOR	(Z10+4),Y
M361
		BNE	M361		; ERROR, ->
M362
		BMI	M362		; ERROR, ->


;**  JMP ($XXXX)
		LDA	#$F8
		STA	POSTCODE

		LDA	#<(L000)
		STA	A0400

		LDA	#>(L000)
		STA	A0400+1

		JMP	(A0400)


;* SHOULD NOT BE EXECUTED AT ALL
		NOP
		SEC
M371
		BCS	M371
		
		NOP
M372
		NOP

		
;**  JSR
		LDA	#$F9
		STA	POSTCODE

		LDX	#$F8
		TXS
		
		SEC
		LDA	#$FF
		JSR	L000A
M373
		BCS	M373
M374
		BNE	M374

		NOP


;**  PHP, PLP
		LDA	#$FA
		STA	POSTCODE
		
		LDA	#$FF
		PHA

		LDA	#0
		PLA
		STA	$06
		CMP	#$FF
XX01
		BNE	XX01		    

		LDX	#0
		
		LDA	#$FF
		PHA		
		PLP
		
		STX	$01F8
		
		PHP
		PLA
		STA	$08
		CMP	#$FF
M381
		BNE	M381
		
		TAX

		LDA	#0
		PHA		
		PLP
		
		STX	$01F8		; ERASE ORIGINAL VALUE ON PURPOSE
		
		PHP
		PLA
 ; STA POSTCODE2		
 AND #$20
		CMP	#$20
M382
		BNE	M382


;**  BRK, RTI
		LDA	#$FB
		STA	POSTCODE
			    
		BRK
		NOP
		

;**  ADC  (3)             	TEST ADC IN DECIMAL MODE
		LDA	#$FC
		STA	POSTCODE
			    
		SED
		
		CLC
		LDA	#$12
		ADC	#$34
M390
		BCS	M390

		CMP	#$46
M391
		BNE	M391
M392
		BCC	M392
M393
		BMI	M393
		
		SEC
		ADC	#$34
M395
		BCS	M395
M396
		BPL	M396

		STA	$04		; TO CHECK POSSIBLE BUG IN T65 	
		CMP	#$81
M394
		BNE	M394

		CLC
		ADC	#$19
M397
		BNE	M397
M398
		BCC	M398
M399
		BMI	M399


;**  SBC  (3)             	TEST SBC IN DECIMAL MODE
		LDA	#$FD
		STA	POSTCODE
			    




		LDA	#$FE
		STA	POSTCODE
			    
L997
		JMP	L997


;	ORG $FFEC
;**  PART OF TESTING JMP
L999
		JMP	L005
 
 
;* SHOULD NOT BE EXECUTED AT ALL
		NOP
		SEC
L999C
		BCS	L999C
		
		NOP



;.BA $FFF4
IRQ
NMI
		NOP
		
		LDA	#$FF
		PHA
		PLP			; CHANGE FLAG REGISTER ON PURPOSE
		
		RTI



