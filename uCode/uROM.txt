// Microcode

.flags

// Zero constant
ZERO             ........ ........ ........ ........ ........ ........ ........ ........

// Initialize p0 mapping register
uP0-INIT         ........ ........ ........ ........ ........ ........ ........ .......1

// uControl Unit operations
uP0              ........ ........ ........ ........ ........ ........ ........ ......1.
uP1              ........ ........ ........ ........ ........ ........ ........ .....1..
uP2              ........ ........ ........ ........ ........ ........ ........ ....1...
uJMP             ........ ........ ........ ........ ........ ........ ........ ...1....
uNJMP            ........ ........ ........ ........ ........ ........ ........ ..1.....    
uVJMP            ........ ........ ........ ........ ........ ........ ........ .1......    
uZJMP            ........ ........ ........ ........ ........ ........ ........ 1.......    
uCJMP            ........ ........ ........ ........ ........ ........ .......1 ........ 
uJMP/INV         ........ ........ ........ ........ ........ ........ ......1. ........

// Halt the CPU
HALT             ........ ........ ........ ........ ........ ........ .....1.. ........

// Constant values used during initialize/reset
CDATA/LD/0       ........ ........ ........ ........ ........ ........ ....1... ........
CDATA/LD/FF      ........ ........ ........ ........ ........ ........ ...1.... ........

// Open path from internal data bus to the address bus
CDATA/TO/CADDRL  ........ ........ ........ ........ ........ ........ ..1..... ........
CDATA/TO/CADDRH  ........ ........ ........ ........ ........ ........ .1...... ........

// External data bus <-> memory
MEM/LD/XDATA     ........ ........ ........ ........ ........ ........ 1....... ........  
MEM/OUT/XDATA    ........ ........ ........ ........ ........ .......1 ........ ........  

// Instruction register
IR/LD/XDATA      ........ ........ ........ ........ ........ ......1. ........ ........   

// MBR <-> external data bus
MBR/LD/XDATA     ........ ........ ........ ........ ........ .....1.. ........ ........
MBR/OUT/XDATA    ........ ........ ........ ........ ........ ....1... ........ ........

// MBR <-> internal data bus
MBR/LD/CDATA     ........ ........ ........ ........ ........ ...1.... ........ ........  
MBR/OUT/CDATA    ........ ........ ........ ........ ........ ..1..... ........ ........ 

// MAR(L/H) <-> internal address bus
MARL/LD/CADDRL   ........ ........ ........ ........ ........ .1...... ........ ........
MARH/LD/CADDRH   ........ ........ ........ ........ ........ 1....... ........ ........  

// Progam counter 
PC/INC           ........ ........ ........ ........ .......1 ........ ........ ........
PC/ADD/CDATA     ........ ........ ........ ........ ......1. ........ ........ ........
PCL/LD/CDATA     ........ ........ ........ ........ .....1.. ........ ........ ........
PCL/OUT/CDATA    ........ ........ ........ ........ ....1... ........ ........ ........
PCH/LD/CDATA     ........ ........ ........ ........ ...1.... ........ ........ ........
PCH/OUT/CDATA    ........ ........ ........ ........ ..1..... ........ ........ ........    
PC/OUT/CADDR     ........ ........ ........ ........ .1...... ........ ........ ........  

// Temporay "stash" registers
STASHL/LD/CDATA   ........ ........ ........ ........ 1....... ........ ........ ........
STASHL/OUT/CDATA  ........ ........ ........ .......1 ........ ........ ........ ........
STASHH/LD/CDATA   ........ ........ ........ ......1. ........ ........ ........ ........
STASHH/OUT/CDATA  ........ ........ ........ .....1.. ........ ........ ........ ........

// Accumulator
A/LD/CDATA       ........ ........ ........ ....1... ........ ........ ........ ........   
A/OUT/CDATA      ........ ........ ........ ...1.... ........ ........ ........ ........ 

// X register
X/LD/CDATA       ........ ........ ........ ..1..... ........ ........ ........ ........
X/OUT/CDATA      ........ ........ ........ .1...... ........ ........ ........ ........

// Y register
Y/LD/CDATA       ........ ........ ........ 1....... ........ ........ ........ ........
Y/OUT/CDATA      ........ ........ .......1 ........ ........ ........ ........ ........

// Load P flags
PN/LD            ........ ........ ......1. ........ ........ ........ ........ ........
PV/LD            ........ ........ .....1.. ........ ........ ........ ........ ........
PZ/LD            ........ ........ ....1... ........ ........ ........ ........ ........
PC/LD            ........ ........ ...1.... ........ ........ ........ ........ ........

// Source of data from which to load P flags
// 00 => reset
// 01 => set
// 10 => ALU
// 11 => CDATA
P/SRC/0          ........ ........ ..1..... ........ ........ ........ ........ ........
P/SRC/1          ........ ........ .1...... ........ ........ ........ ........ ........       

// ALU data movement
ALUA/LD/CDATA    ........ ........ 1....... ........ ........ ........ ........ ........
ALUB/LD/CDATA    ........ .......1 ........ ........ ........ ........ ........ ........
ALUP/LD/P        ........ ......1. ........ ........ ........ ........ ........ ........
ALUR/OUT/CDATA   ........ .....1.. ........ ........ ........ ........ ........ ........

// ALU operation
// 0 0 0 AND
// 0 0 1 OR
// 0 1 0 NOT
// 0 1 1 XOR
// 1 0 0 ADD
// 1 0 1 SUB
// 1 1 0 INC
// 1 1 1 DEC
ALUOP/0          ........ ....1... ........ ........ ........ ........ ........ ........
ALUOP/1          ........ ...1.... ........ ........ ........ ........ ........ ........
ALUOP/2          ........ ..1..... ........ ........ ........ ........ ........ ........

// Stack pointer - starts at $0100 and grows upwards to $01FF
S/INC            ........ .1...... ........ ........ ........ ........ ........ ........
S/DEC            ........ 1....... ........ ........ ........ ........ ........ ........
S/LD/CDATA       .......1 ........ ........ ........ ........ ........ ........ ........
S/OUT/CDATA      ......1. ........ ........ ........ ........ ........ ........ ........
S/OUT/CADDR      .....1.. ........ ........ ........ ........ ........ ........ ........

.ucops
// Move the content of the MBR into memory via the external data bus
MEM<-MBR        MBR/OUT/XDATA | MEM/LD/XDATA

// Move memory at MAR(H/L) into the MBR
MBR<-MEM        MEM/OUT/XDATA | MBR/LD/XDATA
MBR<-A          A/OUT/CDATA | MBR/LD/CDATA

// Move PC into the MAR(H/L) via the internal address bus (H/L) 
MAR<-PC         PC/OUT/CADDR | MARH/LD/CADDRH | MARL/LD/CADDRL
MAR<-S          S/OUT/CADDR | MARL/LD/CADDRL | MARH/LD/CADDRH 
MARL<-STASHL    STASHL/OUT/CDATA | CDATA/TO/CADDRL | MARL/LD/CADDRL
MARH<-MBR       MBR/OUT/CDATA | CDATA/TO/CADDRH | MARH/LD/CADDRH

// Move memory at MAR(H/L) into IR
IR<-MEM         MEM/OUT/XDATA | IR/LD/XDATA

// Move value in PC (H/L)
PCL<-STASHL     STASHL/OUT/CDATA | PCL/LD/CDATA
PCH<-MBR        MBR/OUT/CDATA | PCH/LD/CDATA

// Increment the PC
PC-INC          PC/INC 

// Move value into A via the internal data bus
A<-MBR          MBR/OUT/CDATA | A/LD/CDATA

// Move value into X via the internal data bus
X<-MBR          MBR/OUT/CDATA | X/LD/CDATA

// Move value into Y via the internal data bus
Y<-MBR          MBR/OUT/CDATA | Y/LD/CDATA

// Move value into STASHL via the internal data bus
STASHL<-MBR     MBR/OUT/CDATA | STASHL/LD/CDATA

// Move value into STASHH via the internal data bus
STASHH<-MBR     MBR/OUT/CDATA | STASHH/LD/CDATA

// Move register into ALUA/B via the internal data bus
ALUA<-A         A/OUT/CDATA | ALUA/LD/CDATA
ALUA<-X         X/OUT/CDATA | ALUA/LD/CDATA
ALUA<-Y         X/OUT/CDATA | ALUA/LD/CDATA
ALUB<-Y         Y/OUT/CDATA | ALUB/LD/CDATA
ALUB<-X         X/OUT/CDATA | ALUB/LD/CDATA

// Move the output of the ALU into registers via the internal data bus
A<-ALU          ALUR/OUT/CDATA | A/LD/CDATA
X<-ALU          ALUR/OUT/CDATA | X/LD/CDATA
Y<-ALU          ALUR/OUT/CDATA | Y/LD/CDATA

// ALU operations
ALUOP-AND       ZERO
ALUOP-OR        ALUOP/0
ALUOP-NOT       ALUOP/1 
ALUOP-XOR       ALUOP/1 | ALUOP/0
ALUOP-ADD       ALUOP/2 
ALUOP-SUB       ALUOP/2 | ALUOP/0
ALUOP-INC       ALUOP/2 | ALUOP/1
ALUOP-DEC       ALUOP/2 | ALUOP/1 | ALUOP/0

// Sources of P value
P/SRC-0         ZERO
P/SRC-1         P/SRC/0
P/SRC-ALU       P/SRC/1
P/SRC-CDATA     P/SRC/1 | P/SRC/0

.code

// Init code
ZERO
uP0-INIT p0
CDATA/LD/FF | S/LD/CDATA
CDATA/LD/0 | PCH/LD/CDATA | PCL/LD/CDATA | CDATA/TO/CADDRH | CDATA/TO/CADDRL | MARH/LD/CADDRH | MARL/LD/CADDRL | MBR/LD/CDATA 
CDATA/LD/0 | A/LD/CDATA | X/LD/CDATA | Y/LD/CDATA | STASHH/LD/CDATA | STASHL/LD/CDATA | ALUA/LD/CDATA | ALUB/LD/CDATA 
PZ/LD | PN/LD | PC/LD | PV/LD | P/SRC-0

// Fetch instruction at PC into IR
.label p0
MAR<-PC 
PC-INC | IR<-MEM 
// Separate cycle as we don't have a handle on the op code for decoding until the previous cycle is complete
uP1

// Immediate mode - fetch PC into MBR
.mode IMM
MAR<-PC 
MBR<-MEM | PC-INC | uP2

.mode REL
MAR<-PC 
MBR<-MEM | PC-INC | uP2

.mode IMP
uP2

// Absolute mode 
.mode ABS
MAR<-PC
MBR<-MEM | PC-INC
STASHL<-MBR
MAR<-PC
MBR<-MEM | PC-INC
MARL<-STASHL  
MARH<-MBR | uP2

// Op code implementations
.opcode LDA
A<-MBR | PZ/LD | PN/LD | P/SRC-CDATA | uP0

.opcode TAX
A/OUT/CDATA | X/LD/CDATA | uP0

.opcode TXA
X/OUT/CDATA | A/LD/CDATA | uP0

.opcode LDX
X<-MBR | uP0

.opcode LDY
Y<-MBR | uP0

.opcode STA
MBR<-A 
MEM<-MBR | uP0

.opcode JMP
PCL<-STASHL     
PCH<-MBR | uP0

.opcode INX
ALUA<-X
X<-ALU | ALUOP-INC | PZ/LD | PN/LD | P/SRC-ALU | uP0

.opcode BEQ
uZJMP BEQ_TRUE
uP0
.label BEQ_TRUE
MBR/OUT/CDATA | PC/ADD/CDATA | uP0

.opcode PHA
MAR<-S | MBR<-A
MEM<-MBR | S/DEC | uP0

.opcode PLA
S/INC 
MAR<-S  
MBR<-MEM
A<-MBR | uP0

// Problem need to inc the PC by two before storing
.opcode JSR
// Grab values at PC and PC+1 and store them in stash registers (target address)
MAR<-PC
MBR<-MEM | PC-INC
STASHL<-MBR
MAR<-PC
MBR<-MEM | PC-INC
STASHH<-MBR
// Push the PC onto the stack
S/OUT/CADDR | MARL/LD/CADDRL | MARH/LD/CADDRH | PCL/OUT/CDATA | MBR/LD/CDATA
MEM<-MBR | S/DEC
S/OUT/CADDR | MARL/LD/CADDRL | MARH/LD/CADDRH | PCH/OUT/CDATA | MBR/LD/CDATA
MEM<-MBR | S/DEC
// Jump to the target address
STASHL/OUT/CDATA | PCL/LD/CDATA
STASHH/OUT/CDATA | PCH/LD/CDATA | uP0

.opcode RTS
S/INC
S/OUT/CADDR | MARL/LD/CADDRL | MARH/LD/CADDRH
MBR<-MEM | S/INC
MBR/OUT/CDATA | STASHH/LD/CDATA
STASHH/OUT/CDATA | PCH/LD/CDATA
S/OUT/CADDR | MARL/LD/CADDRL | MARH/LD/CADDRH
MBR<-MEM
MBR/OUT/CDATA | PCL/LD/CDATA | uP0

.opcode BRK
HALT