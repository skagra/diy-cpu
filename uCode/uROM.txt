// Microcode

.flags

// Zero constant
ZERO             ........ ........ ........ ........ ........ ........ ........ ........

// uControl Unit operations
uJMP             ........ ........ ........ ........ ........ ........ ........ ......1.
uNJMP            ........ ........ ........ ........ ........ ........ ........ ..1.....    
uVJMP            ........ ........ ........ ........ ........ ........ ........ .1......    
uZJMP            ........ ........ ........ ........ ........ ........ ........ 1.......    
uCJMP            ........ ........ ........ ........ ........ ........ .......1 ........ 
uJMP/INV         ........ ........ ........ ........ ........ ........ ......1. ........

// Halt the CPU
HALT             ........ ........ ........ ........ ........ ........ .....1.. ........

// External data bus <-> memory
MEM/LD/XDATA     ........ ........ ........ ........ ........ ........ ....1... ........  
MEM/OUT/XDATA    ........ ........ ........ ........ ........ ........ ...1.... ........  

// Instruction register
IR/LD/XDATA      ........ ........ ........ ........ ........ ........ ..1..... ........   

// MBR <-> external data bus
MBR/LD/XDATA     ........ ........ ........ ........ ........ ........ .1...... ........
MBR/OUT/XDATA    ........ ........ ........ ........ ........ ........ 1....... ........

// MBR <-> internal data bus
MBR/LD/CDATA     ........ ........ ........ ........ ........ .......1 ........ ........  
MBR/OUT/CDATA    ........ ........ ........ ........ ........ ......1. ........ ........ 

// MAR(L/H) <-> internal address bus
MARL/LD/CADDRL   ........ ........ ........ ........ ........ .....1.. ........ ........
MARH/LD/CADDRH   ........ ........ ........ ........ ........ ....1... ........ ........  

// Open internal data bus to the internal address bus (L/H)
CDATA/TO/CADDRL  ........ ........ ........ ........ ........ ...1.... ........ ........
CDATA/TO/CADDRH  ........ ........ ........ ........ ........ ..1..... ........ ........

// Progam counter 
PC/INC           ........ ........ ........ ........ ........ .1...... ........ ........    
PC/LD/ADD        ........ ........ ........ ........ ........ 1....... ........ ........
PC/OUT/CADDR     ........ ........ ........ ........ .......1 ........ ........ ........  
PCL/LD/CADDRL    ........ ........ ........ ........ ......1. ........ ........ ........
PCH/LD/CADDRH    ........ ........ ........ ........ .....1.. ........ ........ ........

// Temporay "stash" register
STASH/LD/CDATA   ........ ........ ........ ........ ....1... ........ ........ ........
STASH/OUT/CDATA  ........ ........ ........ ........ ...1.... ........ ........ ........

// Accumulator
A/LD/CDATA       ........ ........ ........ ........ ..1..... ........ ........ ........   
A/OUT/CDATA      ........ ........ ........ ........ .1...... ........ ........ ........ 

// X register
X/LD/CDATA       ........ ........ ........ ........ 1....... ........ ........ ........
X/OUT/CDATA      ........ ........ ........ .......1 ........ ........ ........ ........

// Y register
Y/LD/CDATA       ........ ........ ........ ......1. ........ ........ ........ ........
Y/OUT/CDATA      ........ ........ ........ .....1.. ........ ........ ........ ........

// Load P flags
PN/LD            ........ ........ ........ ....1... ........ ........ ........ ........
PV/LD            ........ ........ ........ ...1.... ........ ........ ........ ........
PZ/LD            ........ ........ ........ ..1..... ........ ........ ........ ........
PC/LD            ........ ........ ........ .1...... ........ ........ ........ ........

// Source of data from which to load P flags
// 00 => reset
// 01 => set
// 10 => ALU
// 11 => CDATA
P/SRC/0          ........ ........ ........ 1....... ........ ........ ........ ........
P/SRC/1          ........ ........ .......1 ........ ........ ........ ........ ........       

// ALU data movement
ALUA/LD/CDATA    ........ ........ ......1. ........ ........ ........ ........ ........
ALUB/LD/CDATA    ........ ........ .....1.. ........ ........ ........ ........ ........
ALUP/LD/P        ........ ........ ....1... ........ ........ ........ ........ ........
ALUR/OUT/CDATA   ........ ........ ...1.... ........ ........ ........ ........ ........

// ALU operation
// 0 0 0 AND
// 0 0 1 OR
// 0 1 0 NOT
// 0 1 1 XOR
// 1 0 0 ADD
// 1 0 1 SUB
// 1 1 0 INC
// 1 1 1 DEC
ALUOP/0          ........ ........ ..1..... ........ ........ ........ ........ ........
ALUOP/1          ........ ........ .1...... ........ ........ ........ ........ ........
ALUOP/2          ........ ........ 1....... ........ ........ ........ ........ ........

// Phase Flags
uP0              ........ .......1 ........ ........ ........ ........ ........ ........
uP1              ........ ......1. ........ ........ ........ ........ ........ ........
uP2              ........ .....1.. ........ ........ ........ ........ ........ ........

.ucops
// Increment the PC
PC-INC          PC/INC | PC/LD/ADD

// Move PC into the MAR(H/L) via the internal address bus (H/L) 
MAR<-PC         PC/OUT/CADDR | MARH/LD/CADDRH | MARL/LD/CADDRL

// Move move memory at MAR(H/L) into IR
IR<-XDATA       MEM/OUT/XDATA | IR/LD/XDATA

// Move the content of the external data bus into the MBR
MBR<-XDATA      MEM/OUT/XDATA | MBR/LD/XDATA

// Move the content of the MBR to A via the internal data bus
A<-MBR          MBR/OUT/CDATA | A/LD/CDATA

// Move the content of A to MBR via the internal data bus
MBR<-A          A/OUT/CDATA | MBR/LD/CDATA

// Move the content of the MBR to X via the internal data bus
X<-MBR          MBR/OUT/CDATA | X/LD/CDATA

// Move the content of the MBR to Y via the internal data bus
Y<-MBR          MBR/OUT/CDATA | Y/LD/CDATA

// Move the content of the MBR to the STASH register via the internal data bus
STASH<-MBR      MBR/OUT/CDATA | STASH/LD/CDATA

// Move content ADDRH on the internal address bus (L) via the internal data bus
STASH<-ADDRL    STASH/OUT/CDATA | CDATA/TO/CADDRL

// Move content ADDRH on the internal address bus (H) via the internal data bus
STASH<-ADDRH    STASH/OUT/CDATA | CDATA/TO/CADDRH

// Move the content of STASH into the MAR(L) via the internal data bus and internal address bus (L)
MARL<-STASH     STASH/OUT/CDATA | CDATA/TO/CADDRL | MARL/LD/CADDRL

// Move the content of MBR into the MAR(H) via internal data bus and the internal address must (H)
MARH<-MBR       MBR/OUT/CDATA | CDATA/TO/CADDRH | MARH/LD/CADDRH

// Move the content of the MBR into memory via the external data bus
MEM<-MBR        MBR/OUT/XDATA | MEM/LD/XDATA

// Move the content of STASH into the PC(L) via the internal data bus and the internal address bus (L)
PCL<-STASH      STASH/OUT/CDATA | CDATA/TO/CADDRL | PCL/LD/CADDRL

// Move the content of MBR into the PC(H) via the internal data bus and the internal address bus (H)
PCH<-MBR        MBR/OUT/CDATA | CDATA/TO/CADDRH | PCH/LD/CADDRH

// Move the content of A into ALUA via the internal data bus
ALUA<-A         A/OUT/CDATA | ALUA/LD/CDATA

// Move the content of X into ALUB via the internal data bus
ALUA<-X         X/OUT/CDATA | ALUA/LD/CDATA

// Move the content of X into ALUB via the internal data bus
ALUB<-X         X/OUT/CDATA | ALUB/LD/CDATA

// Move the content of Y into ALUB via the internal data bus
ALUB<-YDATA     Y/OUT/CDATA | ALUB/LD/CDATA

// Move the output of the ALU into A via the internal data bus
A<-ALU          ALUR/OUT/CDATA | A/LD/CDATA

// Move the output of the ALU into X via the internal data bus
X<-ALU          ALUR/OUT/CDATA | X/LD/CDATA

// ALU operations
ALUOP-AND       ZERO
ALUOP-OR        ALUOP/0
ALUOP-NOT       ALUOP/1 
ALUOP-XOR       ALUOP/1 | ALUOP/0
ALUOP-ADD       ALUOP/2 
ALUOP-SUB       ALUOP/2 | ALUOP/0
ALUOP-INC       ALUOP/2 | ALUOP/1
ALUOP-DEC       ALUOP/2 | ALUOP/1 | ALUOP/0

// Sources of ALU value
P/SRC-0         ZERO
P/SRC-1         P/SRC/0
P/SRC-ALU       P/SRC/1
P/SRC-CDATA     P/SRC/1 | P/SRC/0

.code

// Fetch instruction at PC into IR
.label FETCH
MAR<-PC 
PC-INC | IR<-XDATA 
// Separate cycle as we don't have a handle on the op code until the previous cycle is complete
uP1

// Immediate mode - fetch PC into MBR
.mode IMM
MAR<-PC 
MBR<-XDATA | PC-INC | uP2

.mode REL
MAR<-PC 
MBR<-XDATA | PC-INC | uP2

.mode IMP
uP2

// Absolute mode 
.mode ABS
MAR<-PC
MBR<-XDATA | PC-INC
STASH<-MBR
MAR<-PC
MBR<-XDATA | PC-INC
MARL<-STASH
MARH<-MBR | uP2

// Op code implementations
.opcode LDA
A<-MBR | PZ/LD | PN/LD | P/SRC/0 | P/SRC/1 | uP0

.opcode TAX
A/OUT/CDATA | X/LD/CDATA | uP0

.opcode TXA
X/OUT/CDATA | A/LD/CDATA | uP0

.opcode LDX
X<-MBR | uP0

.opcode LDY
Y<-MBR | uP0

.opcode STA
MBR<-A 
MEM<-MBR | uP0

.opcode JMP
PCL<-STASH     
PCH<-MBR | uP0

.opcode INX
ALUA<-X
X<-ALU | ALUOP-INC | PZ/LD | PN/LD | P/SRC-ALU | uP0

.opcode BEQ
uZJMP BEQ_TRUE
uP0
.label BEQ_TRUE
MBR/OUT/CDATA | PC/LD/ADD | uP0

.opcode BRK
HALT