// =============================================================================
// Init code
// =============================================================================

.label RESET
CDATA/LD/0 | CDATA/TO/CADDR | MBR/LD/CDATA | MAR/LD/CADDR | A/LD/CDATA | X/LD/CDATA | ALUA/LD/CDATA | ALUB/LD/CDATA | PC/LD/CDATA
uP0

// =============================================================================
// Fetch (uP0)
// =============================================================================

.label p0
MAR<-PC                                                     // PC points to opcode to execute - move the PC into MAR
PC-INC                                                      // Increase the PC                        
IR<-MEM                                                     // Load the current op code from memory into the IR
uP1                                                         // Separate cycle as we don't have a handle on the op code for decoding until the previous cycle is completed

// =============================================================================
// Addressing modes (uP1) 
// =============================================================================

// Accumulator 
.mode ACC 
uP2 

// Immediate 
.mode IMM
MAR<-PC | PC-INC | uP2                                               // Move the PC into MAR and jump to uP2

// Implied 
.mode IMP 
uP2                                                                  // Jump directly to uP2

// Relative (branch)
.mode REL
MAR<-PC | PC-INC | uP2                                               // Move the PC into MAR and jump to uP2
                                                                                               
// Zero page
.mode ZP
MAR<-PC 
MBR<-MEM | PC-INC                                                   // Read the zero page address of the operand
MAR<-MBR | uP2                                                      // Move the address into the the MAR

// Zero index X
.mode ZPIDXX
MAR<-PC
MBR<-MEM | PC-INC                                                   // Read index base then increase the PC
ALUA<-MBR                                                           // Move index base to ALUA
ALUB<-X                                                             // Move X into ALUB and clear carry
ALUOP-ADD | MAR<-ALU | uP2                                          // Add X and the index base and store in MARL

// =============================================================================
// Op codes (uP2)
// =============================================================================

// -----------------------------------------------------------------------------
// Arithmetic
// -----------------------------------------------------------------------------

.opcode ADC         
MBR<-MEM                                                            // Read memory into MBR
ALUB<-MBR                                                           // Move the value read into ALUB
ALUA<-A                                                             // Move the accumulator into ALUA
ALUOP-ADD | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | Z/SRC/CDATA | uP0     // Add ALUA to ALB, store the result in the accumulator and set Z flag

.opcode SBC
MBR<-MEM                                                            // Read memory into MBR
ALUB<-MBR                                                           // Move the value read into ALUB
ALUA<-A                                                             // Move the accumulator into ALUA
ALUOP-SUB | ALUR/OUT/CDATA | A/LD/CDATA | PZ/LD | Z/SRC/CDATA | uP0      // Subtract ALUB from ALUA, store the result in the accumulator and set Z flag

// -----------------------------------------------------------------------------
// Branch
// -----------------------------------------------------------------------------

.opcode BEQ                                                         
MBR<-MEM                                                            // Read the offset from memory at MAR into MBR
uZJMP BEQ_TRUE                                                      // Z flag is set jump to BEQ_TRUE
uP0                                                                 // Jump to uP0 - no branch needed
.label BEQ_TRUE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                  // Add the displacement to the PC to branch

// Not zero
.opcode BNE     
MBR<-MEM                                                            // Read the offset from memory at MAR into MBR
uJMP/INV | uZJMP BEQ_BNE                                            // Z flag is not set jump to BNE_TRUE
uP0                                                                 // Jump to uP0 - no branch needed
.label BEQ_BNE
MBR/OUT/CDATA | PC/REL/CDATA | uP0                                  // Add the displacement to the PC 

// -----------------------------------------------------------------------------
// Inc and Dec
// -----------------------------------------------------------------------------

.opcode INX
ALUA<-X                                                              // Move X to ALUA 
ALUOP-INC | X<-ALU | PZ/LD | Z/SRC/CDATA | uP0                       // Add one, store result in X and set Z flag

.opcode DEX
ALUA<-X                                                              // Move X to ALUA 
ALUOP-DEC | X<-ALU | PZ/LD | Z/SRC/CDATA | uP0                       // Subtract one, store result in X and set Z flag

// -----------------------------------------------------------------------------
// Jump and subroutine
// -----------------------------------------------------------------------------

.opcode JMP
MAR<-PC                                                 
MBR<-MEM | PC-INC                                                   // Read the LSB address at PC, and increase PC (we are ignoring the MSB!)
PC<-MBR | uP0                                                       // Jump to the target address by storing it in the PC

// -----------------------------------------------------------------------------
// Register load and store
// -----------------------------------------------------------------------------

.opcode LDA
MBR<-MEM                                                            // Read value at MAR 
A<-MBR | PZ/LD | Z/SRC/CDATA | uP0                                  // Move value into A, setting the Z 

.opcode LDX
MBR<-MEM                                                            // Read the value at MAR
X<-MBR |  PZ/LD | Z/SRC/CDATA | uP0                                 // Move value into X, setting the Z flag                            

// -----------------------------------------------------------------------------
// Register transfer
// -----------------------------------------------------------------------------

.opcode TAX
A/OUT/CDATA | X/LD/CDATA | PZ/LD | Z/SRC/CDATA | uP0                // Move accumulator into X

.opcode TXA
X/OUT/CDATA | A/LD/CDATA | PZ/LD | Z/SRC/CDATA | uP0                // Move X into the accumulator
